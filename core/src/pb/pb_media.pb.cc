// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_media.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pb_media.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace stream_switch {

namespace {

const ::google::protobuf::Descriptor* ProtoMediaFrameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMediaFrameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMediaFrameMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMediaFrameMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtoMediaFrameType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pb_5fmedia_2eproto() {
  protobuf_AddDesc_pb_5fmedia_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pb_media.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoMediaFrameReq_descriptor_ = file->message_type(0);
  static const int ProtoMediaFrameReq_offsets_[1] = {
  };
  ProtoMediaFrameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMediaFrameReq_descriptor_,
      ProtoMediaFrameReq::default_instance_,
      ProtoMediaFrameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaFrameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaFrameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMediaFrameReq));
  ProtoMediaFrameMsg_descriptor_ = file->message_type(1);
  static const int ProtoMediaFrameMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaFrameMsg, stream_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaFrameMsg, sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaFrameMsg, usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaFrameMsg, frame_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaFrameMsg, ssrc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaFrameMsg, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaFrameMsg, data_),
  };
  ProtoMediaFrameMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMediaFrameMsg_descriptor_,
      ProtoMediaFrameMsg::default_instance_,
      ProtoMediaFrameMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaFrameMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaFrameMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMediaFrameMsg));
  ProtoMediaFrameType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pb_5fmedia_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMediaFrameReq_descriptor_, &ProtoMediaFrameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMediaFrameMsg_descriptor_, &ProtoMediaFrameMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pb_5fmedia_2eproto() {
  delete ProtoMediaFrameReq::default_instance_;
  delete ProtoMediaFrameReq_reflection_;
  delete ProtoMediaFrameMsg::default_instance_;
  delete ProtoMediaFrameMsg_reflection_;
}

void protobuf_AddDesc_pb_5fmedia_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016pb_media.proto\022\rstream_switch\"\024\n\022Proto"
    "MediaFrameReq\"\246\001\n\022ProtoMediaFrameMsg\022\024\n\014"
    "stream_index\030\001 \001(\005\022\013\n\003sec\030\002 \001(\003\022\014\n\004usec\030"
    "\003 \001(\005\0226\n\nframe_type\030\004 \001(\0162\".stream_switc"
    "h.ProtoMediaFrameType\022\014\n\004ssrc\030\005 \001(\r\022\013\n\003s"
    "eq\030\006 \001(\004\022\014\n\004data\030@ \001(\014*\235\001\n\023ProtoMediaFra"
    "meType\022\037\n\033PROTO_MEDIA_FRAME_KEY_FRAME\020\000\022"
    " \n\034PROTO_MEDIA_FRAME_DATA_FRAME\020\001\022!\n\035PRO"
    "TO_MEDIA_FRAME_PARAM_FRAME\020\002\022 \n\033PROTO_ME"
    "DIA_FRAME_EOF_FRAME\020\200\002", 382);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pb_media.proto", &protobuf_RegisterTypes);
  ProtoMediaFrameReq::default_instance_ = new ProtoMediaFrameReq();
  ProtoMediaFrameMsg::default_instance_ = new ProtoMediaFrameMsg();
  ProtoMediaFrameReq::default_instance_->InitAsDefaultInstance();
  ProtoMediaFrameMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pb_5fmedia_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pb_5fmedia_2eproto {
  StaticDescriptorInitializer_pb_5fmedia_2eproto() {
    protobuf_AddDesc_pb_5fmedia_2eproto();
  }
} static_descriptor_initializer_pb_5fmedia_2eproto_;
const ::google::protobuf::EnumDescriptor* ProtoMediaFrameType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMediaFrameType_descriptor_;
}
bool ProtoMediaFrameType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 256:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ProtoMediaFrameReq::ProtoMediaFrameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stream_switch.ProtoMediaFrameReq)
}

void ProtoMediaFrameReq::InitAsDefaultInstance() {
}

ProtoMediaFrameReq::ProtoMediaFrameReq(const ProtoMediaFrameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stream_switch.ProtoMediaFrameReq)
}

void ProtoMediaFrameReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMediaFrameReq::~ProtoMediaFrameReq() {
  // @@protoc_insertion_point(destructor:stream_switch.ProtoMediaFrameReq)
  SharedDtor();
}

void ProtoMediaFrameReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMediaFrameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMediaFrameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMediaFrameReq_descriptor_;
}

const ProtoMediaFrameReq& ProtoMediaFrameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fmedia_2eproto();
  return *default_instance_;
}

ProtoMediaFrameReq* ProtoMediaFrameReq::default_instance_ = NULL;

ProtoMediaFrameReq* ProtoMediaFrameReq::New() const {
  return new ProtoMediaFrameReq;
}

void ProtoMediaFrameReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMediaFrameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stream_switch.ProtoMediaFrameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:stream_switch.ProtoMediaFrameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stream_switch.ProtoMediaFrameReq)
  return false;
#undef DO_
}

void ProtoMediaFrameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stream_switch.ProtoMediaFrameReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stream_switch.ProtoMediaFrameReq)
}

::google::protobuf::uint8* ProtoMediaFrameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream_switch.ProtoMediaFrameReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream_switch.ProtoMediaFrameReq)
  return target;
}

int ProtoMediaFrameReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMediaFrameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMediaFrameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMediaFrameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMediaFrameReq::MergeFrom(const ProtoMediaFrameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMediaFrameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMediaFrameReq::CopyFrom(const ProtoMediaFrameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMediaFrameReq::IsInitialized() const {

  return true;
}

void ProtoMediaFrameReq::Swap(ProtoMediaFrameReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMediaFrameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMediaFrameReq_descriptor_;
  metadata.reflection = ProtoMediaFrameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMediaFrameMsg::kStreamIndexFieldNumber;
const int ProtoMediaFrameMsg::kSecFieldNumber;
const int ProtoMediaFrameMsg::kUsecFieldNumber;
const int ProtoMediaFrameMsg::kFrameTypeFieldNumber;
const int ProtoMediaFrameMsg::kSsrcFieldNumber;
const int ProtoMediaFrameMsg::kSeqFieldNumber;
const int ProtoMediaFrameMsg::kDataFieldNumber;
#endif  // !_MSC_VER

ProtoMediaFrameMsg::ProtoMediaFrameMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stream_switch.ProtoMediaFrameMsg)
}

void ProtoMediaFrameMsg::InitAsDefaultInstance() {
}

ProtoMediaFrameMsg::ProtoMediaFrameMsg(const ProtoMediaFrameMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stream_switch.ProtoMediaFrameMsg)
}

void ProtoMediaFrameMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stream_index_ = 0;
  sec_ = GOOGLE_LONGLONG(0);
  usec_ = 0;
  frame_type_ = 0;
  ssrc_ = 0u;
  seq_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMediaFrameMsg::~ProtoMediaFrameMsg() {
  // @@protoc_insertion_point(destructor:stream_switch.ProtoMediaFrameMsg)
  SharedDtor();
}

void ProtoMediaFrameMsg::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ProtoMediaFrameMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMediaFrameMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMediaFrameMsg_descriptor_;
}

const ProtoMediaFrameMsg& ProtoMediaFrameMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fmedia_2eproto();
  return *default_instance_;
}

ProtoMediaFrameMsg* ProtoMediaFrameMsg::default_instance_ = NULL;

ProtoMediaFrameMsg* ProtoMediaFrameMsg::New() const {
  return new ProtoMediaFrameMsg;
}

void ProtoMediaFrameMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProtoMediaFrameMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(sec_, seq_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMediaFrameMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stream_switch.ProtoMediaFrameMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 stream_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stream_index_)));
          set_has_stream_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sec;
        break;
      }

      // optional int64 sec = 2;
      case 2: {
        if (tag == 16) {
         parse_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sec_)));
          set_has_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_usec;
        break;
      }

      // optional int32 usec = 3;
      case 3: {
        if (tag == 24) {
         parse_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usec_)));
          set_has_usec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_frame_type;
        break;
      }

      // optional .stream_switch.ProtoMediaFrameType frame_type = 4;
      case 4: {
        if (tag == 32) {
         parse_frame_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::stream_switch::ProtoMediaFrameType_IsValid(value)) {
            set_frame_type(static_cast< ::stream_switch::ProtoMediaFrameType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ssrc;
        break;
      }

      // optional uint32 ssrc = 5;
      case 5: {
        if (tag == 40) {
         parse_ssrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ssrc_)));
          set_has_ssrc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_seq;
        break;
      }

      // optional uint64 seq = 6;
      case 6: {
        if (tag == 48) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(514)) goto parse_data;
        break;
      }

      // optional bytes data = 64;
      case 64: {
        if (tag == 514) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stream_switch.ProtoMediaFrameMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stream_switch.ProtoMediaFrameMsg)
  return false;
#undef DO_
}

void ProtoMediaFrameMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stream_switch.ProtoMediaFrameMsg)
  // optional int32 stream_index = 1;
  if (has_stream_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stream_index(), output);
  }

  // optional int64 sec = 2;
  if (has_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sec(), output);
  }

  // optional int32 usec = 3;
  if (has_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usec(), output);
  }

  // optional .stream_switch.ProtoMediaFrameType frame_type = 4;
  if (has_frame_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->frame_type(), output);
  }

  // optional uint32 ssrc = 5;
  if (has_ssrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ssrc(), output);
  }

  // optional uint64 seq = 6;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->seq(), output);
  }

  // optional bytes data = 64;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      64, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stream_switch.ProtoMediaFrameMsg)
}

::google::protobuf::uint8* ProtoMediaFrameMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream_switch.ProtoMediaFrameMsg)
  // optional int32 stream_index = 1;
  if (has_stream_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stream_index(), target);
  }

  // optional int64 sec = 2;
  if (has_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sec(), target);
  }

  // optional int32 usec = 3;
  if (has_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usec(), target);
  }

  // optional .stream_switch.ProtoMediaFrameType frame_type = 4;
  if (has_frame_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->frame_type(), target);
  }

  // optional uint32 ssrc = 5;
  if (has_ssrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ssrc(), target);
  }

  // optional uint64 seq = 6;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->seq(), target);
  }

  // optional bytes data = 64;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        64, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream_switch.ProtoMediaFrameMsg)
  return target;
}

int ProtoMediaFrameMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 stream_index = 1;
    if (has_stream_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stream_index());
    }

    // optional int64 sec = 2;
    if (has_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sec());
    }

    // optional int32 usec = 3;
    if (has_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usec());
    }

    // optional .stream_switch.ProtoMediaFrameType frame_type = 4;
    if (has_frame_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->frame_type());
    }

    // optional uint32 ssrc = 5;
    if (has_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ssrc());
    }

    // optional uint64 seq = 6;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seq());
    }

    // optional bytes data = 64;
    if (has_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMediaFrameMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMediaFrameMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMediaFrameMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMediaFrameMsg::MergeFrom(const ProtoMediaFrameMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stream_index()) {
      set_stream_index(from.stream_index());
    }
    if (from.has_sec()) {
      set_sec(from.sec());
    }
    if (from.has_usec()) {
      set_usec(from.usec());
    }
    if (from.has_frame_type()) {
      set_frame_type(from.frame_type());
    }
    if (from.has_ssrc()) {
      set_ssrc(from.ssrc());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMediaFrameMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMediaFrameMsg::CopyFrom(const ProtoMediaFrameMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMediaFrameMsg::IsInitialized() const {

  return true;
}

void ProtoMediaFrameMsg::Swap(ProtoMediaFrameMsg* other) {
  if (other != this) {
    std::swap(stream_index_, other->stream_index_);
    std::swap(sec_, other->sec_);
    std::swap(usec_, other->usec_);
    std::swap(frame_type_, other->frame_type_);
    std::swap(ssrc_, other->ssrc_);
    std::swap(seq_, other->seq_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMediaFrameMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMediaFrameMsg_descriptor_;
  metadata.reflection = ProtoMediaFrameMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace stream_switch

// @@protoc_insertion_point(global_scope)
