// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_client_heartbeat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pb_client_heartbeat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace stream_switch {

namespace {

const ::google::protobuf::Descriptor* ProtoClientHeartbeatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoClientHeartbeatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoClientHeartbeatRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoClientHeartbeatRep_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtoClientIPVersion_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pb_5fclient_5fheartbeat_2eproto() {
  protobuf_AddDesc_pb_5fclient_5fheartbeat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pb_client_heartbeat.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoClientHeartbeatReq_descriptor_ = file->message_type(0);
  static const int ProtoClientHeartbeatReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoClientHeartbeatReq, client_ip_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoClientHeartbeatReq, client_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoClientHeartbeatReq, client_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoClientHeartbeatReq, client_protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoClientHeartbeatReq, client_text_),
  };
  ProtoClientHeartbeatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoClientHeartbeatReq_descriptor_,
      ProtoClientHeartbeatReq::default_instance_,
      ProtoClientHeartbeatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoClientHeartbeatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoClientHeartbeatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoClientHeartbeatReq));
  ProtoClientHeartbeatRep_descriptor_ = file->message_type(1);
  static const int ProtoClientHeartbeatRep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoClientHeartbeatRep, lease_),
  };
  ProtoClientHeartbeatRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoClientHeartbeatRep_descriptor_,
      ProtoClientHeartbeatRep::default_instance_,
      ProtoClientHeartbeatRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoClientHeartbeatRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoClientHeartbeatRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoClientHeartbeatRep));
  ProtoClientIPVersion_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pb_5fclient_5fheartbeat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoClientHeartbeatReq_descriptor_, &ProtoClientHeartbeatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoClientHeartbeatRep_descriptor_, &ProtoClientHeartbeatRep::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pb_5fclient_5fheartbeat_2eproto() {
  delete ProtoClientHeartbeatReq::default_instance_;
  delete ProtoClientHeartbeatReq_reflection_;
  delete ProtoClientHeartbeatRep::default_instance_;
  delete ProtoClientHeartbeatRep_reflection_;
}

void protobuf_AddDesc_pb_5fclient_5fheartbeat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031pb_client_heartbeat.proto\022\rstream_swit"
    "ch\"\257\001\n\027ProtoClientHeartbeatReq\022>\n\021client"
    "_ip_version\030\001 \001(\0162#.stream_switch.ProtoC"
    "lientIPVersion\022\021\n\tclient_ip\030\002 \001(\t\022\023\n\013cli"
    "ent_port\030\003 \001(\005\022\027\n\017client_protocol\030\005 \001(\t\022"
    "\023\n\013client_text\030\006 \001(\t\"(\n\027ProtoClientHeart"
    "beatRep\022\r\n\005lease\030\001 \001(\005*H\n\024ProtoClientIPV"
    "ersion\022\027\n\023PROTO_IP_VERSION_V4\020\000\022\027\n\023PROTO"
    "_IP_VERSION_V6\020\001", 336);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pb_client_heartbeat.proto", &protobuf_RegisterTypes);
  ProtoClientHeartbeatReq::default_instance_ = new ProtoClientHeartbeatReq();
  ProtoClientHeartbeatRep::default_instance_ = new ProtoClientHeartbeatRep();
  ProtoClientHeartbeatReq::default_instance_->InitAsDefaultInstance();
  ProtoClientHeartbeatRep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pb_5fclient_5fheartbeat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pb_5fclient_5fheartbeat_2eproto {
  StaticDescriptorInitializer_pb_5fclient_5fheartbeat_2eproto() {
    protobuf_AddDesc_pb_5fclient_5fheartbeat_2eproto();
  }
} static_descriptor_initializer_pb_5fclient_5fheartbeat_2eproto_;
const ::google::protobuf::EnumDescriptor* ProtoClientIPVersion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoClientIPVersion_descriptor_;
}
bool ProtoClientIPVersion_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoClientHeartbeatReq::kClientIpVersionFieldNumber;
const int ProtoClientHeartbeatReq::kClientIpFieldNumber;
const int ProtoClientHeartbeatReq::kClientPortFieldNumber;
const int ProtoClientHeartbeatReq::kClientProtocolFieldNumber;
const int ProtoClientHeartbeatReq::kClientTextFieldNumber;
#endif  // !_MSC_VER

ProtoClientHeartbeatReq::ProtoClientHeartbeatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stream_switch.ProtoClientHeartbeatReq)
}

void ProtoClientHeartbeatReq::InitAsDefaultInstance() {
}

ProtoClientHeartbeatReq::ProtoClientHeartbeatReq(const ProtoClientHeartbeatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stream_switch.ProtoClientHeartbeatReq)
}

void ProtoClientHeartbeatReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_ip_version_ = 0;
  client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_port_ = 0;
  client_protocol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoClientHeartbeatReq::~ProtoClientHeartbeatReq() {
  // @@protoc_insertion_point(destructor:stream_switch.ProtoClientHeartbeatReq)
  SharedDtor();
}

void ProtoClientHeartbeatReq::SharedDtor() {
  if (client_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_ip_;
  }
  if (client_protocol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_protocol_;
  }
  if (client_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_text_;
  }
  if (this != default_instance_) {
  }
}

void ProtoClientHeartbeatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoClientHeartbeatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoClientHeartbeatReq_descriptor_;
}

const ProtoClientHeartbeatReq& ProtoClientHeartbeatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fclient_5fheartbeat_2eproto();
  return *default_instance_;
}

ProtoClientHeartbeatReq* ProtoClientHeartbeatReq::default_instance_ = NULL;

ProtoClientHeartbeatReq* ProtoClientHeartbeatReq::New() const {
  return new ProtoClientHeartbeatReq;
}

void ProtoClientHeartbeatReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProtoClientHeartbeatReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(client_ip_version_, client_port_);
    if (has_client_ip()) {
      if (client_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_ip_->clear();
      }
    }
    if (has_client_protocol()) {
      if (client_protocol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_protocol_->clear();
      }
    }
    if (has_client_text()) {
      if (client_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_text_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoClientHeartbeatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stream_switch.ProtoClientHeartbeatReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .stream_switch.ProtoClientIPVersion client_ip_version = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::stream_switch::ProtoClientIPVersion_IsValid(value)) {
            set_client_ip_version(static_cast< ::stream_switch::ProtoClientIPVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_client_ip;
        break;
      }

      // optional string client_ip = 2;
      case 2: {
        if (tag == 18) {
         parse_client_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_client_port;
        break;
      }

      // optional int32 client_port = 3;
      case 3: {
        if (tag == 24) {
         parse_client_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_port_)));
          set_has_client_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_client_protocol;
        break;
      }

      // optional string client_protocol = 5;
      case 5: {
        if (tag == 42) {
         parse_client_protocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_protocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_protocol().data(), this->client_protocol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_protocol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_client_text;
        break;
      }

      // optional string client_text = 6;
      case 6: {
        if (tag == 50) {
         parse_client_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_text().data(), this->client_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stream_switch.ProtoClientHeartbeatReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stream_switch.ProtoClientHeartbeatReq)
  return false;
#undef DO_
}

void ProtoClientHeartbeatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stream_switch.ProtoClientHeartbeatReq)
  // optional .stream_switch.ProtoClientIPVersion client_ip_version = 1;
  if (has_client_ip_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->client_ip_version(), output);
  }

  // optional string client_ip = 2;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_ip(), output);
  }

  // optional int32 client_port = 3;
  if (has_client_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->client_port(), output);
  }

  // optional string client_protocol = 5;
  if (has_client_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_protocol().data(), this->client_protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->client_protocol(), output);
  }

  // optional string client_text = 6;
  if (has_client_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_text().data(), this->client_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->client_text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stream_switch.ProtoClientHeartbeatReq)
}

::google::protobuf::uint8* ProtoClientHeartbeatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream_switch.ProtoClientHeartbeatReq)
  // optional .stream_switch.ProtoClientIPVersion client_ip_version = 1;
  if (has_client_ip_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->client_ip_version(), target);
  }

  // optional string client_ip = 2;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_ip(), target);
  }

  // optional int32 client_port = 3;
  if (has_client_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->client_port(), target);
  }

  // optional string client_protocol = 5;
  if (has_client_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_protocol().data(), this->client_protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->client_protocol(), target);
  }

  // optional string client_text = 6;
  if (has_client_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_text().data(), this->client_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->client_text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream_switch.ProtoClientHeartbeatReq)
  return target;
}

int ProtoClientHeartbeatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .stream_switch.ProtoClientIPVersion client_ip_version = 1;
    if (has_client_ip_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_ip_version());
    }

    // optional string client_ip = 2;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ip());
    }

    // optional int32 client_port = 3;
    if (has_client_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_port());
    }

    // optional string client_protocol = 5;
    if (has_client_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_protocol());
    }

    // optional string client_text = 6;
    if (has_client_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoClientHeartbeatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoClientHeartbeatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoClientHeartbeatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoClientHeartbeatReq::MergeFrom(const ProtoClientHeartbeatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_ip_version()) {
      set_client_ip_version(from.client_ip_version());
    }
    if (from.has_client_ip()) {
      set_client_ip(from.client_ip());
    }
    if (from.has_client_port()) {
      set_client_port(from.client_port());
    }
    if (from.has_client_protocol()) {
      set_client_protocol(from.client_protocol());
    }
    if (from.has_client_text()) {
      set_client_text(from.client_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoClientHeartbeatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoClientHeartbeatReq::CopyFrom(const ProtoClientHeartbeatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoClientHeartbeatReq::IsInitialized() const {

  return true;
}

void ProtoClientHeartbeatReq::Swap(ProtoClientHeartbeatReq* other) {
  if (other != this) {
    std::swap(client_ip_version_, other->client_ip_version_);
    std::swap(client_ip_, other->client_ip_);
    std::swap(client_port_, other->client_port_);
    std::swap(client_protocol_, other->client_protocol_);
    std::swap(client_text_, other->client_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoClientHeartbeatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoClientHeartbeatReq_descriptor_;
  metadata.reflection = ProtoClientHeartbeatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoClientHeartbeatRep::kLeaseFieldNumber;
#endif  // !_MSC_VER

ProtoClientHeartbeatRep::ProtoClientHeartbeatRep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stream_switch.ProtoClientHeartbeatRep)
}

void ProtoClientHeartbeatRep::InitAsDefaultInstance() {
}

ProtoClientHeartbeatRep::ProtoClientHeartbeatRep(const ProtoClientHeartbeatRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stream_switch.ProtoClientHeartbeatRep)
}

void ProtoClientHeartbeatRep::SharedCtor() {
  _cached_size_ = 0;
  lease_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoClientHeartbeatRep::~ProtoClientHeartbeatRep() {
  // @@protoc_insertion_point(destructor:stream_switch.ProtoClientHeartbeatRep)
  SharedDtor();
}

void ProtoClientHeartbeatRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoClientHeartbeatRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoClientHeartbeatRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoClientHeartbeatRep_descriptor_;
}

const ProtoClientHeartbeatRep& ProtoClientHeartbeatRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fclient_5fheartbeat_2eproto();
  return *default_instance_;
}

ProtoClientHeartbeatRep* ProtoClientHeartbeatRep::default_instance_ = NULL;

ProtoClientHeartbeatRep* ProtoClientHeartbeatRep::New() const {
  return new ProtoClientHeartbeatRep;
}

void ProtoClientHeartbeatRep::Clear() {
  lease_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoClientHeartbeatRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stream_switch.ProtoClientHeartbeatRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lease = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lease_)));
          set_has_lease();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stream_switch.ProtoClientHeartbeatRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stream_switch.ProtoClientHeartbeatRep)
  return false;
#undef DO_
}

void ProtoClientHeartbeatRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stream_switch.ProtoClientHeartbeatRep)
  // optional int32 lease = 1;
  if (has_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lease(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stream_switch.ProtoClientHeartbeatRep)
}

::google::protobuf::uint8* ProtoClientHeartbeatRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream_switch.ProtoClientHeartbeatRep)
  // optional int32 lease = 1;
  if (has_lease()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lease(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream_switch.ProtoClientHeartbeatRep)
  return target;
}

int ProtoClientHeartbeatRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lease = 1;
    if (has_lease()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lease());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoClientHeartbeatRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoClientHeartbeatRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoClientHeartbeatRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoClientHeartbeatRep::MergeFrom(const ProtoClientHeartbeatRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lease()) {
      set_lease(from.lease());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoClientHeartbeatRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoClientHeartbeatRep::CopyFrom(const ProtoClientHeartbeatRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoClientHeartbeatRep::IsInitialized() const {

  return true;
}

void ProtoClientHeartbeatRep::Swap(ProtoClientHeartbeatRep* other) {
  if (other != this) {
    std::swap(lease_, other->lease_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoClientHeartbeatRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoClientHeartbeatRep_descriptor_;
  metadata.reflection = ProtoClientHeartbeatRep_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace stream_switch

// @@protoc_insertion_point(global_scope)
