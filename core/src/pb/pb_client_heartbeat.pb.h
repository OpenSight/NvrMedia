// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_client_heartbeat.proto

#ifndef PROTOBUF_pb_5fclient_5fheartbeat_2eproto__INCLUDED
#define PROTOBUF_pb_5fclient_5fheartbeat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace stream_switch {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pb_5fclient_5fheartbeat_2eproto();
void protobuf_AssignDesc_pb_5fclient_5fheartbeat_2eproto();
void protobuf_ShutdownFile_pb_5fclient_5fheartbeat_2eproto();

class ProtoClientHeartbeatReq;
class ProtoClientHeartbeatRep;

enum ProtoClientIPVersion {
  PROTO_IP_VERSION_V4 = 0,
  PROTO_IP_VERSION_V6 = 1
};
bool ProtoClientIPVersion_IsValid(int value);
const ProtoClientIPVersion ProtoClientIPVersion_MIN = PROTO_IP_VERSION_V4;
const ProtoClientIPVersion ProtoClientIPVersion_MAX = PROTO_IP_VERSION_V6;
const int ProtoClientIPVersion_ARRAYSIZE = ProtoClientIPVersion_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtoClientIPVersion_descriptor();
inline const ::std::string& ProtoClientIPVersion_Name(ProtoClientIPVersion value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtoClientIPVersion_descriptor(), value);
}
inline bool ProtoClientIPVersion_Parse(
    const ::std::string& name, ProtoClientIPVersion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoClientIPVersion>(
    ProtoClientIPVersion_descriptor(), name, value);
}
// ===================================================================

class ProtoClientHeartbeatReq : public ::google::protobuf::Message {
 public:
  ProtoClientHeartbeatReq();
  virtual ~ProtoClientHeartbeatReq();

  ProtoClientHeartbeatReq(const ProtoClientHeartbeatReq& from);

  inline ProtoClientHeartbeatReq& operator=(const ProtoClientHeartbeatReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoClientHeartbeatReq& default_instance();

  void Swap(ProtoClientHeartbeatReq* other);

  // implements Message ----------------------------------------------

  ProtoClientHeartbeatReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoClientHeartbeatReq& from);
  void MergeFrom(const ProtoClientHeartbeatReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .stream_switch.ProtoClientIPVersion client_ip_version = 1;
  inline bool has_client_ip_version() const;
  inline void clear_client_ip_version();
  static const int kClientIpVersionFieldNumber = 1;
  inline ::stream_switch::ProtoClientIPVersion client_ip_version() const;
  inline void set_client_ip_version(::stream_switch::ProtoClientIPVersion value);

  // optional string client_ip = 2;
  inline bool has_client_ip() const;
  inline void clear_client_ip();
  static const int kClientIpFieldNumber = 2;
  inline const ::std::string& client_ip() const;
  inline void set_client_ip(const ::std::string& value);
  inline void set_client_ip(const char* value);
  inline void set_client_ip(const char* value, size_t size);
  inline ::std::string* mutable_client_ip();
  inline ::std::string* release_client_ip();
  inline void set_allocated_client_ip(::std::string* client_ip);

  // optional int32 client_port = 3;
  inline bool has_client_port() const;
  inline void clear_client_port();
  static const int kClientPortFieldNumber = 3;
  inline ::google::protobuf::int32 client_port() const;
  inline void set_client_port(::google::protobuf::int32 value);

  // optional string client_protocol = 5;
  inline bool has_client_protocol() const;
  inline void clear_client_protocol();
  static const int kClientProtocolFieldNumber = 5;
  inline const ::std::string& client_protocol() const;
  inline void set_client_protocol(const ::std::string& value);
  inline void set_client_protocol(const char* value);
  inline void set_client_protocol(const char* value, size_t size);
  inline ::std::string* mutable_client_protocol();
  inline ::std::string* release_client_protocol();
  inline void set_allocated_client_protocol(::std::string* client_protocol);

  // optional string client_text = 6;
  inline bool has_client_text() const;
  inline void clear_client_text();
  static const int kClientTextFieldNumber = 6;
  inline const ::std::string& client_text() const;
  inline void set_client_text(const ::std::string& value);
  inline void set_client_text(const char* value);
  inline void set_client_text(const char* value, size_t size);
  inline ::std::string* mutable_client_text();
  inline ::std::string* release_client_text();
  inline void set_allocated_client_text(::std::string* client_text);

  // optional int64 last_active_time = 7;
  inline bool has_last_active_time() const;
  inline void clear_last_active_time();
  static const int kLastActiveTimeFieldNumber = 7;
  inline ::google::protobuf::int64 last_active_time() const;
  inline void set_last_active_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:stream_switch.ProtoClientHeartbeatReq)
 private:
  inline void set_has_client_ip_version();
  inline void clear_has_client_ip_version();
  inline void set_has_client_ip();
  inline void clear_has_client_ip();
  inline void set_has_client_port();
  inline void clear_has_client_port();
  inline void set_has_client_protocol();
  inline void clear_has_client_protocol();
  inline void set_has_client_text();
  inline void clear_has_client_text();
  inline void set_has_last_active_time();
  inline void clear_has_last_active_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* client_ip_;
  int client_ip_version_;
  ::google::protobuf::int32 client_port_;
  ::std::string* client_protocol_;
  ::std::string* client_text_;
  ::google::protobuf::int64 last_active_time_;
  friend void  protobuf_AddDesc_pb_5fclient_5fheartbeat_2eproto();
  friend void protobuf_AssignDesc_pb_5fclient_5fheartbeat_2eproto();
  friend void protobuf_ShutdownFile_pb_5fclient_5fheartbeat_2eproto();

  void InitAsDefaultInstance();
  static ProtoClientHeartbeatReq* default_instance_;
};
// -------------------------------------------------------------------

class ProtoClientHeartbeatRep : public ::google::protobuf::Message {
 public:
  ProtoClientHeartbeatRep();
  virtual ~ProtoClientHeartbeatRep();

  ProtoClientHeartbeatRep(const ProtoClientHeartbeatRep& from);

  inline ProtoClientHeartbeatRep& operator=(const ProtoClientHeartbeatRep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoClientHeartbeatRep& default_instance();

  void Swap(ProtoClientHeartbeatRep* other);

  // implements Message ----------------------------------------------

  ProtoClientHeartbeatRep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoClientHeartbeatRep& from);
  void MergeFrom(const ProtoClientHeartbeatRep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 lease = 1;
  inline bool has_lease() const;
  inline void clear_lease();
  static const int kLeaseFieldNumber = 1;
  inline ::google::protobuf::int32 lease() const;
  inline void set_lease(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:stream_switch.ProtoClientHeartbeatRep)
 private:
  inline void set_has_lease();
  inline void clear_has_lease();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 lease_;
  friend void  protobuf_AddDesc_pb_5fclient_5fheartbeat_2eproto();
  friend void protobuf_AssignDesc_pb_5fclient_5fheartbeat_2eproto();
  friend void protobuf_ShutdownFile_pb_5fclient_5fheartbeat_2eproto();

  void InitAsDefaultInstance();
  static ProtoClientHeartbeatRep* default_instance_;
};
// ===================================================================


// ===================================================================

// ProtoClientHeartbeatReq

// optional .stream_switch.ProtoClientIPVersion client_ip_version = 1;
inline bool ProtoClientHeartbeatReq::has_client_ip_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoClientHeartbeatReq::set_has_client_ip_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoClientHeartbeatReq::clear_has_client_ip_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoClientHeartbeatReq::clear_client_ip_version() {
  client_ip_version_ = 0;
  clear_has_client_ip_version();
}
inline ::stream_switch::ProtoClientIPVersion ProtoClientHeartbeatReq::client_ip_version() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoClientHeartbeatReq.client_ip_version)
  return static_cast< ::stream_switch::ProtoClientIPVersion >(client_ip_version_);
}
inline void ProtoClientHeartbeatReq::set_client_ip_version(::stream_switch::ProtoClientIPVersion value) {
  assert(::stream_switch::ProtoClientIPVersion_IsValid(value));
  set_has_client_ip_version();
  client_ip_version_ = value;
  // @@protoc_insertion_point(field_set:stream_switch.ProtoClientHeartbeatReq.client_ip_version)
}

// optional string client_ip = 2;
inline bool ProtoClientHeartbeatReq::has_client_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoClientHeartbeatReq::set_has_client_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoClientHeartbeatReq::clear_has_client_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoClientHeartbeatReq::clear_client_ip() {
  if (client_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ip_->clear();
  }
  clear_has_client_ip();
}
inline const ::std::string& ProtoClientHeartbeatReq::client_ip() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoClientHeartbeatReq.client_ip)
  return *client_ip_;
}
inline void ProtoClientHeartbeatReq::set_client_ip(const ::std::string& value) {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ip_ = new ::std::string;
  }
  client_ip_->assign(value);
  // @@protoc_insertion_point(field_set:stream_switch.ProtoClientHeartbeatReq.client_ip)
}
inline void ProtoClientHeartbeatReq::set_client_ip(const char* value) {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ip_ = new ::std::string;
  }
  client_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:stream_switch.ProtoClientHeartbeatReq.client_ip)
}
inline void ProtoClientHeartbeatReq::set_client_ip(const char* value, size_t size) {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ip_ = new ::std::string;
  }
  client_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stream_switch.ProtoClientHeartbeatReq.client_ip)
}
inline ::std::string* ProtoClientHeartbeatReq::mutable_client_ip() {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:stream_switch.ProtoClientHeartbeatReq.client_ip)
  return client_ip_;
}
inline ::std::string* ProtoClientHeartbeatReq::release_client_ip() {
  clear_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_ip_;
    client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProtoClientHeartbeatReq::set_allocated_client_ip(::std::string* client_ip) {
  if (client_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_ip_;
  }
  if (client_ip) {
    set_has_client_ip();
    client_ip_ = client_ip;
  } else {
    clear_has_client_ip();
    client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:stream_switch.ProtoClientHeartbeatReq.client_ip)
}

// optional int32 client_port = 3;
inline bool ProtoClientHeartbeatReq::has_client_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoClientHeartbeatReq::set_has_client_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoClientHeartbeatReq::clear_has_client_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoClientHeartbeatReq::clear_client_port() {
  client_port_ = 0;
  clear_has_client_port();
}
inline ::google::protobuf::int32 ProtoClientHeartbeatReq::client_port() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoClientHeartbeatReq.client_port)
  return client_port_;
}
inline void ProtoClientHeartbeatReq::set_client_port(::google::protobuf::int32 value) {
  set_has_client_port();
  client_port_ = value;
  // @@protoc_insertion_point(field_set:stream_switch.ProtoClientHeartbeatReq.client_port)
}

// optional string client_protocol = 5;
inline bool ProtoClientHeartbeatReq::has_client_protocol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoClientHeartbeatReq::set_has_client_protocol() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoClientHeartbeatReq::clear_has_client_protocol() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoClientHeartbeatReq::clear_client_protocol() {
  if (client_protocol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_protocol_->clear();
  }
  clear_has_client_protocol();
}
inline const ::std::string& ProtoClientHeartbeatReq::client_protocol() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoClientHeartbeatReq.client_protocol)
  return *client_protocol_;
}
inline void ProtoClientHeartbeatReq::set_client_protocol(const ::std::string& value) {
  set_has_client_protocol();
  if (client_protocol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_protocol_ = new ::std::string;
  }
  client_protocol_->assign(value);
  // @@protoc_insertion_point(field_set:stream_switch.ProtoClientHeartbeatReq.client_protocol)
}
inline void ProtoClientHeartbeatReq::set_client_protocol(const char* value) {
  set_has_client_protocol();
  if (client_protocol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_protocol_ = new ::std::string;
  }
  client_protocol_->assign(value);
  // @@protoc_insertion_point(field_set_char:stream_switch.ProtoClientHeartbeatReq.client_protocol)
}
inline void ProtoClientHeartbeatReq::set_client_protocol(const char* value, size_t size) {
  set_has_client_protocol();
  if (client_protocol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_protocol_ = new ::std::string;
  }
  client_protocol_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stream_switch.ProtoClientHeartbeatReq.client_protocol)
}
inline ::std::string* ProtoClientHeartbeatReq::mutable_client_protocol() {
  set_has_client_protocol();
  if (client_protocol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_protocol_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:stream_switch.ProtoClientHeartbeatReq.client_protocol)
  return client_protocol_;
}
inline ::std::string* ProtoClientHeartbeatReq::release_client_protocol() {
  clear_has_client_protocol();
  if (client_protocol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_protocol_;
    client_protocol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProtoClientHeartbeatReq::set_allocated_client_protocol(::std::string* client_protocol) {
  if (client_protocol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_protocol_;
  }
  if (client_protocol) {
    set_has_client_protocol();
    client_protocol_ = client_protocol;
  } else {
    clear_has_client_protocol();
    client_protocol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:stream_switch.ProtoClientHeartbeatReq.client_protocol)
}

// optional string client_text = 6;
inline bool ProtoClientHeartbeatReq::has_client_text() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoClientHeartbeatReq::set_has_client_text() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoClientHeartbeatReq::clear_has_client_text() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoClientHeartbeatReq::clear_client_text() {
  if (client_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_text_->clear();
  }
  clear_has_client_text();
}
inline const ::std::string& ProtoClientHeartbeatReq::client_text() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoClientHeartbeatReq.client_text)
  return *client_text_;
}
inline void ProtoClientHeartbeatReq::set_client_text(const ::std::string& value) {
  set_has_client_text();
  if (client_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_text_ = new ::std::string;
  }
  client_text_->assign(value);
  // @@protoc_insertion_point(field_set:stream_switch.ProtoClientHeartbeatReq.client_text)
}
inline void ProtoClientHeartbeatReq::set_client_text(const char* value) {
  set_has_client_text();
  if (client_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_text_ = new ::std::string;
  }
  client_text_->assign(value);
  // @@protoc_insertion_point(field_set_char:stream_switch.ProtoClientHeartbeatReq.client_text)
}
inline void ProtoClientHeartbeatReq::set_client_text(const char* value, size_t size) {
  set_has_client_text();
  if (client_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_text_ = new ::std::string;
  }
  client_text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stream_switch.ProtoClientHeartbeatReq.client_text)
}
inline ::std::string* ProtoClientHeartbeatReq::mutable_client_text() {
  set_has_client_text();
  if (client_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:stream_switch.ProtoClientHeartbeatReq.client_text)
  return client_text_;
}
inline ::std::string* ProtoClientHeartbeatReq::release_client_text() {
  clear_has_client_text();
  if (client_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_text_;
    client_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProtoClientHeartbeatReq::set_allocated_client_text(::std::string* client_text) {
  if (client_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_text_;
  }
  if (client_text) {
    set_has_client_text();
    client_text_ = client_text;
  } else {
    clear_has_client_text();
    client_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:stream_switch.ProtoClientHeartbeatReq.client_text)
}

// optional int64 last_active_time = 7;
inline bool ProtoClientHeartbeatReq::has_last_active_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoClientHeartbeatReq::set_has_last_active_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoClientHeartbeatReq::clear_has_last_active_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoClientHeartbeatReq::clear_last_active_time() {
  last_active_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_active_time();
}
inline ::google::protobuf::int64 ProtoClientHeartbeatReq::last_active_time() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoClientHeartbeatReq.last_active_time)
  return last_active_time_;
}
inline void ProtoClientHeartbeatReq::set_last_active_time(::google::protobuf::int64 value) {
  set_has_last_active_time();
  last_active_time_ = value;
  // @@protoc_insertion_point(field_set:stream_switch.ProtoClientHeartbeatReq.last_active_time)
}

// -------------------------------------------------------------------

// ProtoClientHeartbeatRep

// optional int32 lease = 1;
inline bool ProtoClientHeartbeatRep::has_lease() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoClientHeartbeatRep::set_has_lease() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoClientHeartbeatRep::clear_has_lease() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoClientHeartbeatRep::clear_lease() {
  lease_ = 0;
  clear_has_lease();
}
inline ::google::protobuf::int32 ProtoClientHeartbeatRep::lease() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoClientHeartbeatRep.lease)
  return lease_;
}
inline void ProtoClientHeartbeatRep::set_lease(::google::protobuf::int32 value) {
  set_has_lease();
  lease_ = value;
  // @@protoc_insertion_point(field_set:stream_switch.ProtoClientHeartbeatRep.lease)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace stream_switch

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::stream_switch::ProtoClientIPVersion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stream_switch::ProtoClientIPVersion>() {
  return ::stream_switch::ProtoClientIPVersion_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pb_5fclient_5fheartbeat_2eproto__INCLUDED
