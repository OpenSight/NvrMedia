// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_media_statistic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pb_media_statistic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace stream_switch {

namespace {

const ::google::protobuf::Descriptor* ProtoMediaStatisticReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMediaStatisticReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSubStreamMediaStatistic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSubStreamMediaStatistic_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMediaStatisticRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMediaStatisticRep_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pb_5fmedia_5fstatistic_2eproto() {
  protobuf_AddDesc_pb_5fmedia_5fstatistic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pb_media_statistic.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoMediaStatisticReq_descriptor_ = file->message_type(0);
  static const int ProtoMediaStatisticReq_offsets_[1] = {
  };
  ProtoMediaStatisticReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMediaStatisticReq_descriptor_,
      ProtoMediaStatisticReq::default_instance_,
      ProtoMediaStatisticReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaStatisticReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaStatisticReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMediaStatisticReq));
  ProtoSubStreamMediaStatistic_descriptor_ = file->message_type(1);
  static const int ProtoSubStreamMediaStatistic_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSubStreamMediaStatistic, sub_stream_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSubStreamMediaStatistic, media_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSubStreamMediaStatistic, total_packets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSubStreamMediaStatistic, receive_packets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSubStreamMediaStatistic, received_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSubStreamMediaStatistic, key_frame_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSubStreamMediaStatistic, received_frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSubStreamMediaStatistic, received_key_frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSubStreamMediaStatistic, last_gov_),
  };
  ProtoSubStreamMediaStatistic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSubStreamMediaStatistic_descriptor_,
      ProtoSubStreamMediaStatistic::default_instance_,
      ProtoSubStreamMediaStatistic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSubStreamMediaStatistic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSubStreamMediaStatistic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSubStreamMediaStatistic));
  ProtoMediaStatisticRep_descriptor_ = file->message_type(2);
  static const int ProtoMediaStatisticRep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaStatisticRep, ssrc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaStatisticRep, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaStatisticRep, total_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaStatisticRep, sub_stream_stats_),
  };
  ProtoMediaStatisticRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMediaStatisticRep_descriptor_,
      ProtoMediaStatisticRep::default_instance_,
      ProtoMediaStatisticRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaStatisticRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaStatisticRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMediaStatisticRep));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pb_5fmedia_5fstatistic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMediaStatisticReq_descriptor_, &ProtoMediaStatisticReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSubStreamMediaStatistic_descriptor_, &ProtoSubStreamMediaStatistic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMediaStatisticRep_descriptor_, &ProtoMediaStatisticRep::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pb_5fmedia_5fstatistic_2eproto() {
  delete ProtoMediaStatisticReq::default_instance_;
  delete ProtoMediaStatisticReq_reflection_;
  delete ProtoSubStreamMediaStatistic::default_instance_;
  delete ProtoSubStreamMediaStatistic_reflection_;
  delete ProtoMediaStatisticRep::default_instance_;
  delete ProtoMediaStatisticRep_reflection_;
}

void protobuf_AddDesc_pb_5fmedia_5fstatistic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::stream_switch::protobuf_AddDesc_pb_5fmetadata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030pb_media_statistic.proto\022\rstream_switc"
    "h\032\021pb_metadata.proto\"\030\n\026ProtoMediaStatis"
    "ticReq\"\235\002\n\034ProtoSubStreamMediaStatistic\022"
    "\030\n\020sub_stream_index\030\001 \001(\005\022:\n\nmedia_type\030"
    "\002 \001(\0162&.stream_switch.ProtoSubStreamMedi"
    "aType\022\025\n\rtotal_packets\030\n \001(\004\022\027\n\017receive_"
    "packets\030\013 \001(\004\022\026\n\016received_bytes\030\024 \001(\004\022\027\n"
    "\017key_frame_bytes\030\025 \001(\004\022\027\n\017received_frame"
    "s\030\036 \001(\004\022\033\n\023received_key_frames\030\037 \001(\004\022\020\n\010"
    "last_gov\030  \001(\004\"\225\001\n\026ProtoMediaStatisticRe"
    "p\022\014\n\004ssrc\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\003\022\023\n\013to"
    "tal_bytes\030\003 \001(\004\022E\n\020sub_stream_stats\030@ \003("
    "\0132+.stream_switch.ProtoSubStreamMediaSta"
    "tistic", 526);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pb_media_statistic.proto", &protobuf_RegisterTypes);
  ProtoMediaStatisticReq::default_instance_ = new ProtoMediaStatisticReq();
  ProtoSubStreamMediaStatistic::default_instance_ = new ProtoSubStreamMediaStatistic();
  ProtoMediaStatisticRep::default_instance_ = new ProtoMediaStatisticRep();
  ProtoMediaStatisticReq::default_instance_->InitAsDefaultInstance();
  ProtoSubStreamMediaStatistic::default_instance_->InitAsDefaultInstance();
  ProtoMediaStatisticRep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pb_5fmedia_5fstatistic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pb_5fmedia_5fstatistic_2eproto {
  StaticDescriptorInitializer_pb_5fmedia_5fstatistic_2eproto() {
    protobuf_AddDesc_pb_5fmedia_5fstatistic_2eproto();
  }
} static_descriptor_initializer_pb_5fmedia_5fstatistic_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ProtoMediaStatisticReq::ProtoMediaStatisticReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stream_switch.ProtoMediaStatisticReq)
}

void ProtoMediaStatisticReq::InitAsDefaultInstance() {
}

ProtoMediaStatisticReq::ProtoMediaStatisticReq(const ProtoMediaStatisticReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stream_switch.ProtoMediaStatisticReq)
}

void ProtoMediaStatisticReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMediaStatisticReq::~ProtoMediaStatisticReq() {
  // @@protoc_insertion_point(destructor:stream_switch.ProtoMediaStatisticReq)
  SharedDtor();
}

void ProtoMediaStatisticReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMediaStatisticReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMediaStatisticReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMediaStatisticReq_descriptor_;
}

const ProtoMediaStatisticReq& ProtoMediaStatisticReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fmedia_5fstatistic_2eproto();
  return *default_instance_;
}

ProtoMediaStatisticReq* ProtoMediaStatisticReq::default_instance_ = NULL;

ProtoMediaStatisticReq* ProtoMediaStatisticReq::New() const {
  return new ProtoMediaStatisticReq;
}

void ProtoMediaStatisticReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMediaStatisticReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stream_switch.ProtoMediaStatisticReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:stream_switch.ProtoMediaStatisticReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stream_switch.ProtoMediaStatisticReq)
  return false;
#undef DO_
}

void ProtoMediaStatisticReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stream_switch.ProtoMediaStatisticReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stream_switch.ProtoMediaStatisticReq)
}

::google::protobuf::uint8* ProtoMediaStatisticReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream_switch.ProtoMediaStatisticReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream_switch.ProtoMediaStatisticReq)
  return target;
}

int ProtoMediaStatisticReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMediaStatisticReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMediaStatisticReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMediaStatisticReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMediaStatisticReq::MergeFrom(const ProtoMediaStatisticReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMediaStatisticReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMediaStatisticReq::CopyFrom(const ProtoMediaStatisticReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMediaStatisticReq::IsInitialized() const {

  return true;
}

void ProtoMediaStatisticReq::Swap(ProtoMediaStatisticReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMediaStatisticReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMediaStatisticReq_descriptor_;
  metadata.reflection = ProtoMediaStatisticReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSubStreamMediaStatistic::kSubStreamIndexFieldNumber;
const int ProtoSubStreamMediaStatistic::kMediaTypeFieldNumber;
const int ProtoSubStreamMediaStatistic::kTotalPacketsFieldNumber;
const int ProtoSubStreamMediaStatistic::kReceivePacketsFieldNumber;
const int ProtoSubStreamMediaStatistic::kReceivedBytesFieldNumber;
const int ProtoSubStreamMediaStatistic::kKeyFrameBytesFieldNumber;
const int ProtoSubStreamMediaStatistic::kReceivedFramesFieldNumber;
const int ProtoSubStreamMediaStatistic::kReceivedKeyFramesFieldNumber;
const int ProtoSubStreamMediaStatistic::kLastGovFieldNumber;
#endif  // !_MSC_VER

ProtoSubStreamMediaStatistic::ProtoSubStreamMediaStatistic()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stream_switch.ProtoSubStreamMediaStatistic)
}

void ProtoSubStreamMediaStatistic::InitAsDefaultInstance() {
}

ProtoSubStreamMediaStatistic::ProtoSubStreamMediaStatistic(const ProtoSubStreamMediaStatistic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stream_switch.ProtoSubStreamMediaStatistic)
}

void ProtoSubStreamMediaStatistic::SharedCtor() {
  _cached_size_ = 0;
  sub_stream_index_ = 0;
  media_type_ = 0;
  total_packets_ = GOOGLE_ULONGLONG(0);
  receive_packets_ = GOOGLE_ULONGLONG(0);
  received_bytes_ = GOOGLE_ULONGLONG(0);
  key_frame_bytes_ = GOOGLE_ULONGLONG(0);
  received_frames_ = GOOGLE_ULONGLONG(0);
  received_key_frames_ = GOOGLE_ULONGLONG(0);
  last_gov_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSubStreamMediaStatistic::~ProtoSubStreamMediaStatistic() {
  // @@protoc_insertion_point(destructor:stream_switch.ProtoSubStreamMediaStatistic)
  SharedDtor();
}

void ProtoSubStreamMediaStatistic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoSubStreamMediaStatistic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSubStreamMediaStatistic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSubStreamMediaStatistic_descriptor_;
}

const ProtoSubStreamMediaStatistic& ProtoSubStreamMediaStatistic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fmedia_5fstatistic_2eproto();
  return *default_instance_;
}

ProtoSubStreamMediaStatistic* ProtoSubStreamMediaStatistic::default_instance_ = NULL;

ProtoSubStreamMediaStatistic* ProtoSubStreamMediaStatistic::New() const {
  return new ProtoSubStreamMediaStatistic;
}

void ProtoSubStreamMediaStatistic::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProtoSubStreamMediaStatistic*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(sub_stream_index_, received_key_frames_);
  }
  last_gov_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSubStreamMediaStatistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stream_switch.ProtoSubStreamMediaStatistic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sub_stream_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_stream_index_)));
          set_has_sub_stream_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_media_type;
        break;
      }

      // optional .stream_switch.ProtoSubStreamMediaType media_type = 2;
      case 2: {
        if (tag == 16) {
         parse_media_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::stream_switch::ProtoSubStreamMediaType_IsValid(value)) {
            set_media_type(static_cast< ::stream_switch::ProtoSubStreamMediaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_total_packets;
        break;
      }

      // optional uint64 total_packets = 10;
      case 10: {
        if (tag == 80) {
         parse_total_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_packets_)));
          set_has_total_packets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_receive_packets;
        break;
      }

      // optional uint64 receive_packets = 11;
      case 11: {
        if (tag == 88) {
         parse_receive_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receive_packets_)));
          set_has_receive_packets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_received_bytes;
        break;
      }

      // optional uint64 received_bytes = 20;
      case 20: {
        if (tag == 160) {
         parse_received_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &received_bytes_)));
          set_has_received_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_key_frame_bytes;
        break;
      }

      // optional uint64 key_frame_bytes = 21;
      case 21: {
        if (tag == 168) {
         parse_key_frame_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_frame_bytes_)));
          set_has_key_frame_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_received_frames;
        break;
      }

      // optional uint64 received_frames = 30;
      case 30: {
        if (tag == 240) {
         parse_received_frames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &received_frames_)));
          set_has_received_frames();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_received_key_frames;
        break;
      }

      // optional uint64 received_key_frames = 31;
      case 31: {
        if (tag == 248) {
         parse_received_key_frames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &received_key_frames_)));
          set_has_received_key_frames();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_last_gov;
        break;
      }

      // optional uint64 last_gov = 32;
      case 32: {
        if (tag == 256) {
         parse_last_gov:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_gov_)));
          set_has_last_gov();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stream_switch.ProtoSubStreamMediaStatistic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stream_switch.ProtoSubStreamMediaStatistic)
  return false;
#undef DO_
}

void ProtoSubStreamMediaStatistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stream_switch.ProtoSubStreamMediaStatistic)
  // optional int32 sub_stream_index = 1;
  if (has_sub_stream_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sub_stream_index(), output);
  }

  // optional .stream_switch.ProtoSubStreamMediaType media_type = 2;
  if (has_media_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->media_type(), output);
  }

  // optional uint64 total_packets = 10;
  if (has_total_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->total_packets(), output);
  }

  // optional uint64 receive_packets = 11;
  if (has_receive_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->receive_packets(), output);
  }

  // optional uint64 received_bytes = 20;
  if (has_received_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->received_bytes(), output);
  }

  // optional uint64 key_frame_bytes = 21;
  if (has_key_frame_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->key_frame_bytes(), output);
  }

  // optional uint64 received_frames = 30;
  if (has_received_frames()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->received_frames(), output);
  }

  // optional uint64 received_key_frames = 31;
  if (has_received_key_frames()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->received_key_frames(), output);
  }

  // optional uint64 last_gov = 32;
  if (has_last_gov()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->last_gov(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stream_switch.ProtoSubStreamMediaStatistic)
}

::google::protobuf::uint8* ProtoSubStreamMediaStatistic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream_switch.ProtoSubStreamMediaStatistic)
  // optional int32 sub_stream_index = 1;
  if (has_sub_stream_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sub_stream_index(), target);
  }

  // optional .stream_switch.ProtoSubStreamMediaType media_type = 2;
  if (has_media_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->media_type(), target);
  }

  // optional uint64 total_packets = 10;
  if (has_total_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->total_packets(), target);
  }

  // optional uint64 receive_packets = 11;
  if (has_receive_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->receive_packets(), target);
  }

  // optional uint64 received_bytes = 20;
  if (has_received_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->received_bytes(), target);
  }

  // optional uint64 key_frame_bytes = 21;
  if (has_key_frame_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->key_frame_bytes(), target);
  }

  // optional uint64 received_frames = 30;
  if (has_received_frames()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->received_frames(), target);
  }

  // optional uint64 received_key_frames = 31;
  if (has_received_key_frames()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(31, this->received_key_frames(), target);
  }

  // optional uint64 last_gov = 32;
  if (has_last_gov()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(32, this->last_gov(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream_switch.ProtoSubStreamMediaStatistic)
  return target;
}

int ProtoSubStreamMediaStatistic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sub_stream_index = 1;
    if (has_sub_stream_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_stream_index());
    }

    // optional .stream_switch.ProtoSubStreamMediaType media_type = 2;
    if (has_media_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->media_type());
    }

    // optional uint64 total_packets = 10;
    if (has_total_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_packets());
    }

    // optional uint64 receive_packets = 11;
    if (has_receive_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receive_packets());
    }

    // optional uint64 received_bytes = 20;
    if (has_received_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->received_bytes());
    }

    // optional uint64 key_frame_bytes = 21;
    if (has_key_frame_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key_frame_bytes());
    }

    // optional uint64 received_frames = 30;
    if (has_received_frames()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->received_frames());
    }

    // optional uint64 received_key_frames = 31;
    if (has_received_key_frames()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->received_key_frames());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 last_gov = 32;
    if (has_last_gov()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_gov());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSubStreamMediaStatistic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSubStreamMediaStatistic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSubStreamMediaStatistic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSubStreamMediaStatistic::MergeFrom(const ProtoSubStreamMediaStatistic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sub_stream_index()) {
      set_sub_stream_index(from.sub_stream_index());
    }
    if (from.has_media_type()) {
      set_media_type(from.media_type());
    }
    if (from.has_total_packets()) {
      set_total_packets(from.total_packets());
    }
    if (from.has_receive_packets()) {
      set_receive_packets(from.receive_packets());
    }
    if (from.has_received_bytes()) {
      set_received_bytes(from.received_bytes());
    }
    if (from.has_key_frame_bytes()) {
      set_key_frame_bytes(from.key_frame_bytes());
    }
    if (from.has_received_frames()) {
      set_received_frames(from.received_frames());
    }
    if (from.has_received_key_frames()) {
      set_received_key_frames(from.received_key_frames());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_gov()) {
      set_last_gov(from.last_gov());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSubStreamMediaStatistic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSubStreamMediaStatistic::CopyFrom(const ProtoSubStreamMediaStatistic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSubStreamMediaStatistic::IsInitialized() const {

  return true;
}

void ProtoSubStreamMediaStatistic::Swap(ProtoSubStreamMediaStatistic* other) {
  if (other != this) {
    std::swap(sub_stream_index_, other->sub_stream_index_);
    std::swap(media_type_, other->media_type_);
    std::swap(total_packets_, other->total_packets_);
    std::swap(receive_packets_, other->receive_packets_);
    std::swap(received_bytes_, other->received_bytes_);
    std::swap(key_frame_bytes_, other->key_frame_bytes_);
    std::swap(received_frames_, other->received_frames_);
    std::swap(received_key_frames_, other->received_key_frames_);
    std::swap(last_gov_, other->last_gov_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSubStreamMediaStatistic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSubStreamMediaStatistic_descriptor_;
  metadata.reflection = ProtoSubStreamMediaStatistic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMediaStatisticRep::kSsrcFieldNumber;
const int ProtoMediaStatisticRep::kTimestampFieldNumber;
const int ProtoMediaStatisticRep::kTotalBytesFieldNumber;
const int ProtoMediaStatisticRep::kSubStreamStatsFieldNumber;
#endif  // !_MSC_VER

ProtoMediaStatisticRep::ProtoMediaStatisticRep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stream_switch.ProtoMediaStatisticRep)
}

void ProtoMediaStatisticRep::InitAsDefaultInstance() {
}

ProtoMediaStatisticRep::ProtoMediaStatisticRep(const ProtoMediaStatisticRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stream_switch.ProtoMediaStatisticRep)
}

void ProtoMediaStatisticRep::SharedCtor() {
  _cached_size_ = 0;
  ssrc_ = 0u;
  timestamp_ = GOOGLE_LONGLONG(0);
  total_bytes_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMediaStatisticRep::~ProtoMediaStatisticRep() {
  // @@protoc_insertion_point(destructor:stream_switch.ProtoMediaStatisticRep)
  SharedDtor();
}

void ProtoMediaStatisticRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMediaStatisticRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMediaStatisticRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMediaStatisticRep_descriptor_;
}

const ProtoMediaStatisticRep& ProtoMediaStatisticRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fmedia_5fstatistic_2eproto();
  return *default_instance_;
}

ProtoMediaStatisticRep* ProtoMediaStatisticRep::default_instance_ = NULL;

ProtoMediaStatisticRep* ProtoMediaStatisticRep::New() const {
  return new ProtoMediaStatisticRep;
}

void ProtoMediaStatisticRep::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProtoMediaStatisticRep*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(timestamp_, total_bytes_);
    ssrc_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  sub_stream_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMediaStatisticRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stream_switch.ProtoMediaStatisticRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ssrc = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ssrc_)));
          set_has_ssrc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total_bytes;
        break;
      }

      // optional uint64 total_bytes = 3;
      case 3: {
        if (tag == 24) {
         parse_total_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_bytes_)));
          set_has_total_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(514)) goto parse_sub_stream_stats;
        break;
      }

      // repeated .stream_switch.ProtoSubStreamMediaStatistic sub_stream_stats = 64;
      case 64: {
        if (tag == 514) {
         parse_sub_stream_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sub_stream_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(514)) goto parse_sub_stream_stats;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stream_switch.ProtoMediaStatisticRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stream_switch.ProtoMediaStatisticRep)
  return false;
#undef DO_
}

void ProtoMediaStatisticRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stream_switch.ProtoMediaStatisticRep)
  // optional uint32 ssrc = 1;
  if (has_ssrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ssrc(), output);
  }

  // optional int64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // optional uint64 total_bytes = 3;
  if (has_total_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->total_bytes(), output);
  }

  // repeated .stream_switch.ProtoSubStreamMediaStatistic sub_stream_stats = 64;
  for (int i = 0; i < this->sub_stream_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->sub_stream_stats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stream_switch.ProtoMediaStatisticRep)
}

::google::protobuf::uint8* ProtoMediaStatisticRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream_switch.ProtoMediaStatisticRep)
  // optional uint32 ssrc = 1;
  if (has_ssrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ssrc(), target);
  }

  // optional int64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // optional uint64 total_bytes = 3;
  if (has_total_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->total_bytes(), target);
  }

  // repeated .stream_switch.ProtoSubStreamMediaStatistic sub_stream_stats = 64;
  for (int i = 0; i < this->sub_stream_stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        64, this->sub_stream_stats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream_switch.ProtoMediaStatisticRep)
  return target;
}

int ProtoMediaStatisticRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ssrc = 1;
    if (has_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ssrc());
    }

    // optional int64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional uint64 total_bytes = 3;
    if (has_total_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_bytes());
    }

  }
  // repeated .stream_switch.ProtoSubStreamMediaStatistic sub_stream_stats = 64;
  total_size += 2 * this->sub_stream_stats_size();
  for (int i = 0; i < this->sub_stream_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sub_stream_stats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMediaStatisticRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMediaStatisticRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMediaStatisticRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMediaStatisticRep::MergeFrom(const ProtoMediaStatisticRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  sub_stream_stats_.MergeFrom(from.sub_stream_stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssrc()) {
      set_ssrc(from.ssrc());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_total_bytes()) {
      set_total_bytes(from.total_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMediaStatisticRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMediaStatisticRep::CopyFrom(const ProtoMediaStatisticRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMediaStatisticRep::IsInitialized() const {

  return true;
}

void ProtoMediaStatisticRep::Swap(ProtoMediaStatisticRep* other) {
  if (other != this) {
    std::swap(ssrc_, other->ssrc_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(total_bytes_, other->total_bytes_);
    sub_stream_stats_.Swap(&other->sub_stream_stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMediaStatisticRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMediaStatisticRep_descriptor_;
  metadata.reflection = ProtoMediaStatisticRep_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace stream_switch

// @@protoc_insertion_point(global_scope)
