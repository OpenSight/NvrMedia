package stream_switch;


import "pb_metadata.proto";

enum ProtoSourceStreamState {
    PROTO_SOURCE_STREAM_STATE_CONNECTING = 0;        //the connection is being established now
    PROTO_SOURCE_STREAM_STATE_OK = 1;                //connection has been established, and media data is transfer now
    
    
    //error state
    PROTO_SOURCE_STREAM_STATE_ERR = -1;              //general error
    PROTO_SOURCE_STREAM_STATE_ERR_CONNECT_FAIL = -2;    //connect the source failed
    PROTO_SOURCE_STREAM_STATE_ERR_MEIDA_STOP = -3;    //stop to receive the media data
    PROTO_SOURCE_STREAM_STATE_ERR_TIME = -4;          //timestamp loss sync
    
    PROTO_SOURCE_STREAM_STATE_ERR_TIMEOUT = -255;     //not receive the stream info 
}

message ProtoStreamInfoMsg{
    optional ProtoSourceStreamState state = 1;
    optional ProtoPlayType play_type = 2;  //playing type of this stream
    optional string source_proto = 3;  //the protocol of this source
    optional uint32 ssrc = 4; //ssrc of this stream, if the receive frame must has the same ssrc with this stream, 
                                              //otherwise the media frame cannot be described by this meta data
    optional uint32 cur_bps = 5;  //the last 1 sec bps for the total throughput of this stream
    optional int64 last_frame_sec = 6;
    optional int32 last_frame_usec = 7;
	optional int64 send_time = 8;    //the time (from epoch) in millisecond of broadcasting this msg
	
	optional string stream_name = 9;  //the stream name 
	optional int32 client_num = 10;  //the client number
    //tag below 64 is reserved to future extension
}   


