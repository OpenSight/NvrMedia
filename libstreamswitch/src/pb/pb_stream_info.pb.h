// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_stream_info.proto

#ifndef PROTOBUF_pb_5fstream_5finfo_2eproto__INCLUDED
#define PROTOBUF_pb_5fstream_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pb_metadata.pb.h"
// @@protoc_insertion_point(includes)

namespace stream_switch {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pb_5fstream_5finfo_2eproto();
void protobuf_AssignDesc_pb_5fstream_5finfo_2eproto();
void protobuf_ShutdownFile_pb_5fstream_5finfo_2eproto();

class ProtoStreamInfoMsg;

enum ProtoSourceStreamState {
  PROTO_SOURCE_STREAM_STATE_CONNECTING = 0,
  PROTO_SOURCE_STREAM_STATE_OK = 1,
  PROTO_SOURCE_STREAM_STATE_ERR = -1,
  PROTO_SOURCE_STREAM_STATE_ERR_CONNECT_FAIL = -2,
  PROTO_SOURCE_STREAM_STATE_ERR_MEIDA_STOP = -3,
  PROTO_SOURCE_STREAM_STATE_ERR_TIME = -4
};
bool ProtoSourceStreamState_IsValid(int value);
const ProtoSourceStreamState ProtoSourceStreamState_MIN = PROTO_SOURCE_STREAM_STATE_ERR_TIME;
const ProtoSourceStreamState ProtoSourceStreamState_MAX = PROTO_SOURCE_STREAM_STATE_OK;
const int ProtoSourceStreamState_ARRAYSIZE = ProtoSourceStreamState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtoSourceStreamState_descriptor();
inline const ::std::string& ProtoSourceStreamState_Name(ProtoSourceStreamState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtoSourceStreamState_descriptor(), value);
}
inline bool ProtoSourceStreamState_Parse(
    const ::std::string& name, ProtoSourceStreamState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoSourceStreamState>(
    ProtoSourceStreamState_descriptor(), name, value);
}
// ===================================================================

class ProtoStreamInfoMsg : public ::google::protobuf::Message {
 public:
  ProtoStreamInfoMsg();
  virtual ~ProtoStreamInfoMsg();

  ProtoStreamInfoMsg(const ProtoStreamInfoMsg& from);

  inline ProtoStreamInfoMsg& operator=(const ProtoStreamInfoMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoStreamInfoMsg& default_instance();

  void Swap(ProtoStreamInfoMsg* other);

  // implements Message ----------------------------------------------

  ProtoStreamInfoMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoStreamInfoMsg& from);
  void MergeFrom(const ProtoStreamInfoMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .stream_switch.ProtoSourceStreamState state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::stream_switch::ProtoSourceStreamState state() const;
  inline void set_state(::stream_switch::ProtoSourceStreamState value);

  // optional .stream_switch.ProtoPlayType play_type = 2;
  inline bool has_play_type() const;
  inline void clear_play_type();
  static const int kPlayTypeFieldNumber = 2;
  inline ::stream_switch::ProtoPlayType play_type() const;
  inline void set_play_type(::stream_switch::ProtoPlayType value);

  // optional string source_proto = 3;
  inline bool has_source_proto() const;
  inline void clear_source_proto();
  static const int kSourceProtoFieldNumber = 3;
  inline const ::std::string& source_proto() const;
  inline void set_source_proto(const ::std::string& value);
  inline void set_source_proto(const char* value);
  inline void set_source_proto(const char* value, size_t size);
  inline ::std::string* mutable_source_proto();
  inline ::std::string* release_source_proto();
  inline void set_allocated_source_proto(::std::string* source_proto);

  // optional uint32 ssrc = 4;
  inline bool has_ssrc() const;
  inline void clear_ssrc();
  static const int kSsrcFieldNumber = 4;
  inline ::google::protobuf::uint32 ssrc() const;
  inline void set_ssrc(::google::protobuf::uint32 value);

  // optional uint32 cur_bps = 5;
  inline bool has_cur_bps() const;
  inline void clear_cur_bps();
  static const int kCurBpsFieldNumber = 5;
  inline ::google::protobuf::uint32 cur_bps() const;
  inline void set_cur_bps(::google::protobuf::uint32 value);

  // optional int64 last_frame_sec = 6;
  inline bool has_last_frame_sec() const;
  inline void clear_last_frame_sec();
  static const int kLastFrameSecFieldNumber = 6;
  inline ::google::protobuf::int64 last_frame_sec() const;
  inline void set_last_frame_sec(::google::protobuf::int64 value);

  // optional int32 last_frame_usec = 7;
  inline bool has_last_frame_usec() const;
  inline void clear_last_frame_usec();
  static const int kLastFrameUsecFieldNumber = 7;
  inline ::google::protobuf::int32 last_frame_usec() const;
  inline void set_last_frame_usec(::google::protobuf::int32 value);

  // optional int64 send_time = 8;
  inline bool has_send_time() const;
  inline void clear_send_time();
  static const int kSendTimeFieldNumber = 8;
  inline ::google::protobuf::int64 send_time() const;
  inline void set_send_time(::google::protobuf::int64 value);

  // optional string stream_name = 9;
  inline bool has_stream_name() const;
  inline void clear_stream_name();
  static const int kStreamNameFieldNumber = 9;
  inline const ::std::string& stream_name() const;
  inline void set_stream_name(const ::std::string& value);
  inline void set_stream_name(const char* value);
  inline void set_stream_name(const char* value, size_t size);
  inline ::std::string* mutable_stream_name();
  inline ::std::string* release_stream_name();
  inline void set_allocated_stream_name(::std::string* stream_name);

  // optional int32 client_num = 10;
  inline bool has_client_num() const;
  inline void clear_client_num();
  static const int kClientNumFieldNumber = 10;
  inline ::google::protobuf::int32 client_num() const;
  inline void set_client_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:stream_switch.ProtoStreamInfoMsg)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_play_type();
  inline void clear_has_play_type();
  inline void set_has_source_proto();
  inline void clear_has_source_proto();
  inline void set_has_ssrc();
  inline void clear_has_ssrc();
  inline void set_has_cur_bps();
  inline void clear_has_cur_bps();
  inline void set_has_last_frame_sec();
  inline void clear_has_last_frame_sec();
  inline void set_has_last_frame_usec();
  inline void clear_has_last_frame_usec();
  inline void set_has_send_time();
  inline void clear_has_send_time();
  inline void set_has_stream_name();
  inline void clear_has_stream_name();
  inline void set_has_client_num();
  inline void clear_has_client_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int state_;
  int play_type_;
  ::std::string* source_proto_;
  ::google::protobuf::uint32 ssrc_;
  ::google::protobuf::uint32 cur_bps_;
  ::google::protobuf::int64 last_frame_sec_;
  ::google::protobuf::int64 send_time_;
  ::google::protobuf::int32 last_frame_usec_;
  ::google::protobuf::int32 client_num_;
  ::std::string* stream_name_;
  friend void  protobuf_AddDesc_pb_5fstream_5finfo_2eproto();
  friend void protobuf_AssignDesc_pb_5fstream_5finfo_2eproto();
  friend void protobuf_ShutdownFile_pb_5fstream_5finfo_2eproto();

  void InitAsDefaultInstance();
  static ProtoStreamInfoMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// ProtoStreamInfoMsg

// optional .stream_switch.ProtoSourceStreamState state = 1;
inline bool ProtoStreamInfoMsg::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoStreamInfoMsg::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoStreamInfoMsg::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoStreamInfoMsg::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::stream_switch::ProtoSourceStreamState ProtoStreamInfoMsg::state() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoStreamInfoMsg.state)
  return static_cast< ::stream_switch::ProtoSourceStreamState >(state_);
}
inline void ProtoStreamInfoMsg::set_state(::stream_switch::ProtoSourceStreamState value) {
  assert(::stream_switch::ProtoSourceStreamState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:stream_switch.ProtoStreamInfoMsg.state)
}

// optional .stream_switch.ProtoPlayType play_type = 2;
inline bool ProtoStreamInfoMsg::has_play_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoStreamInfoMsg::set_has_play_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoStreamInfoMsg::clear_has_play_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoStreamInfoMsg::clear_play_type() {
  play_type_ = 0;
  clear_has_play_type();
}
inline ::stream_switch::ProtoPlayType ProtoStreamInfoMsg::play_type() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoStreamInfoMsg.play_type)
  return static_cast< ::stream_switch::ProtoPlayType >(play_type_);
}
inline void ProtoStreamInfoMsg::set_play_type(::stream_switch::ProtoPlayType value) {
  assert(::stream_switch::ProtoPlayType_IsValid(value));
  set_has_play_type();
  play_type_ = value;
  // @@protoc_insertion_point(field_set:stream_switch.ProtoStreamInfoMsg.play_type)
}

// optional string source_proto = 3;
inline bool ProtoStreamInfoMsg::has_source_proto() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoStreamInfoMsg::set_has_source_proto() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoStreamInfoMsg::clear_has_source_proto() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoStreamInfoMsg::clear_source_proto() {
  if (source_proto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_proto_->clear();
  }
  clear_has_source_proto();
}
inline const ::std::string& ProtoStreamInfoMsg::source_proto() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoStreamInfoMsg.source_proto)
  return *source_proto_;
}
inline void ProtoStreamInfoMsg::set_source_proto(const ::std::string& value) {
  set_has_source_proto();
  if (source_proto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_proto_ = new ::std::string;
  }
  source_proto_->assign(value);
  // @@protoc_insertion_point(field_set:stream_switch.ProtoStreamInfoMsg.source_proto)
}
inline void ProtoStreamInfoMsg::set_source_proto(const char* value) {
  set_has_source_proto();
  if (source_proto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_proto_ = new ::std::string;
  }
  source_proto_->assign(value);
  // @@protoc_insertion_point(field_set_char:stream_switch.ProtoStreamInfoMsg.source_proto)
}
inline void ProtoStreamInfoMsg::set_source_proto(const char* value, size_t size) {
  set_has_source_proto();
  if (source_proto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_proto_ = new ::std::string;
  }
  source_proto_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stream_switch.ProtoStreamInfoMsg.source_proto)
}
inline ::std::string* ProtoStreamInfoMsg::mutable_source_proto() {
  set_has_source_proto();
  if (source_proto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_proto_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:stream_switch.ProtoStreamInfoMsg.source_proto)
  return source_proto_;
}
inline ::std::string* ProtoStreamInfoMsg::release_source_proto() {
  clear_has_source_proto();
  if (source_proto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_proto_;
    source_proto_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProtoStreamInfoMsg::set_allocated_source_proto(::std::string* source_proto) {
  if (source_proto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_proto_;
  }
  if (source_proto) {
    set_has_source_proto();
    source_proto_ = source_proto;
  } else {
    clear_has_source_proto();
    source_proto_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:stream_switch.ProtoStreamInfoMsg.source_proto)
}

// optional uint32 ssrc = 4;
inline bool ProtoStreamInfoMsg::has_ssrc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoStreamInfoMsg::set_has_ssrc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoStreamInfoMsg::clear_has_ssrc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoStreamInfoMsg::clear_ssrc() {
  ssrc_ = 0u;
  clear_has_ssrc();
}
inline ::google::protobuf::uint32 ProtoStreamInfoMsg::ssrc() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoStreamInfoMsg.ssrc)
  return ssrc_;
}
inline void ProtoStreamInfoMsg::set_ssrc(::google::protobuf::uint32 value) {
  set_has_ssrc();
  ssrc_ = value;
  // @@protoc_insertion_point(field_set:stream_switch.ProtoStreamInfoMsg.ssrc)
}

// optional uint32 cur_bps = 5;
inline bool ProtoStreamInfoMsg::has_cur_bps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoStreamInfoMsg::set_has_cur_bps() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoStreamInfoMsg::clear_has_cur_bps() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoStreamInfoMsg::clear_cur_bps() {
  cur_bps_ = 0u;
  clear_has_cur_bps();
}
inline ::google::protobuf::uint32 ProtoStreamInfoMsg::cur_bps() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoStreamInfoMsg.cur_bps)
  return cur_bps_;
}
inline void ProtoStreamInfoMsg::set_cur_bps(::google::protobuf::uint32 value) {
  set_has_cur_bps();
  cur_bps_ = value;
  // @@protoc_insertion_point(field_set:stream_switch.ProtoStreamInfoMsg.cur_bps)
}

// optional int64 last_frame_sec = 6;
inline bool ProtoStreamInfoMsg::has_last_frame_sec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoStreamInfoMsg::set_has_last_frame_sec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoStreamInfoMsg::clear_has_last_frame_sec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoStreamInfoMsg::clear_last_frame_sec() {
  last_frame_sec_ = GOOGLE_LONGLONG(0);
  clear_has_last_frame_sec();
}
inline ::google::protobuf::int64 ProtoStreamInfoMsg::last_frame_sec() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoStreamInfoMsg.last_frame_sec)
  return last_frame_sec_;
}
inline void ProtoStreamInfoMsg::set_last_frame_sec(::google::protobuf::int64 value) {
  set_has_last_frame_sec();
  last_frame_sec_ = value;
  // @@protoc_insertion_point(field_set:stream_switch.ProtoStreamInfoMsg.last_frame_sec)
}

// optional int32 last_frame_usec = 7;
inline bool ProtoStreamInfoMsg::has_last_frame_usec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoStreamInfoMsg::set_has_last_frame_usec() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoStreamInfoMsg::clear_has_last_frame_usec() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoStreamInfoMsg::clear_last_frame_usec() {
  last_frame_usec_ = 0;
  clear_has_last_frame_usec();
}
inline ::google::protobuf::int32 ProtoStreamInfoMsg::last_frame_usec() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoStreamInfoMsg.last_frame_usec)
  return last_frame_usec_;
}
inline void ProtoStreamInfoMsg::set_last_frame_usec(::google::protobuf::int32 value) {
  set_has_last_frame_usec();
  last_frame_usec_ = value;
  // @@protoc_insertion_point(field_set:stream_switch.ProtoStreamInfoMsg.last_frame_usec)
}

// optional int64 send_time = 8;
inline bool ProtoStreamInfoMsg::has_send_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoStreamInfoMsg::set_has_send_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoStreamInfoMsg::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoStreamInfoMsg::clear_send_time() {
  send_time_ = GOOGLE_LONGLONG(0);
  clear_has_send_time();
}
inline ::google::protobuf::int64 ProtoStreamInfoMsg::send_time() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoStreamInfoMsg.send_time)
  return send_time_;
}
inline void ProtoStreamInfoMsg::set_send_time(::google::protobuf::int64 value) {
  set_has_send_time();
  send_time_ = value;
  // @@protoc_insertion_point(field_set:stream_switch.ProtoStreamInfoMsg.send_time)
}

// optional string stream_name = 9;
inline bool ProtoStreamInfoMsg::has_stream_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoStreamInfoMsg::set_has_stream_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoStreamInfoMsg::clear_has_stream_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoStreamInfoMsg::clear_stream_name() {
  if (stream_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_name_->clear();
  }
  clear_has_stream_name();
}
inline const ::std::string& ProtoStreamInfoMsg::stream_name() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoStreamInfoMsg.stream_name)
  return *stream_name_;
}
inline void ProtoStreamInfoMsg::set_stream_name(const ::std::string& value) {
  set_has_stream_name();
  if (stream_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_name_ = new ::std::string;
  }
  stream_name_->assign(value);
  // @@protoc_insertion_point(field_set:stream_switch.ProtoStreamInfoMsg.stream_name)
}
inline void ProtoStreamInfoMsg::set_stream_name(const char* value) {
  set_has_stream_name();
  if (stream_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_name_ = new ::std::string;
  }
  stream_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:stream_switch.ProtoStreamInfoMsg.stream_name)
}
inline void ProtoStreamInfoMsg::set_stream_name(const char* value, size_t size) {
  set_has_stream_name();
  if (stream_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_name_ = new ::std::string;
  }
  stream_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stream_switch.ProtoStreamInfoMsg.stream_name)
}
inline ::std::string* ProtoStreamInfoMsg::mutable_stream_name() {
  set_has_stream_name();
  if (stream_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:stream_switch.ProtoStreamInfoMsg.stream_name)
  return stream_name_;
}
inline ::std::string* ProtoStreamInfoMsg::release_stream_name() {
  clear_has_stream_name();
  if (stream_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stream_name_;
    stream_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProtoStreamInfoMsg::set_allocated_stream_name(::std::string* stream_name) {
  if (stream_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stream_name_;
  }
  if (stream_name) {
    set_has_stream_name();
    stream_name_ = stream_name;
  } else {
    clear_has_stream_name();
    stream_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:stream_switch.ProtoStreamInfoMsg.stream_name)
}

// optional int32 client_num = 10;
inline bool ProtoStreamInfoMsg::has_client_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoStreamInfoMsg::set_has_client_num() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoStreamInfoMsg::clear_has_client_num() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoStreamInfoMsg::clear_client_num() {
  client_num_ = 0;
  clear_has_client_num();
}
inline ::google::protobuf::int32 ProtoStreamInfoMsg::client_num() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoStreamInfoMsg.client_num)
  return client_num_;
}
inline void ProtoStreamInfoMsg::set_client_num(::google::protobuf::int32 value) {
  set_has_client_num();
  client_num_ = value;
  // @@protoc_insertion_point(field_set:stream_switch.ProtoStreamInfoMsg.client_num)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace stream_switch

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::stream_switch::ProtoSourceStreamState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stream_switch::ProtoSourceStreamState>() {
  return ::stream_switch::ProtoSourceStreamState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pb_5fstream_5finfo_2eproto__INCLUDED
