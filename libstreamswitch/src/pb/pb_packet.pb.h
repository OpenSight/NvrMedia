// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_packet.proto

#ifndef PROTOBUF_pb_5fpacket_2eproto__INCLUDED
#define PROTOBUF_pb_5fpacket_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace stream_switch {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pb_5fpacket_2eproto();
void protobuf_AssignDesc_pb_5fpacket_2eproto();
void protobuf_ShutdownFile_pb_5fpacket_2eproto();

class ProtoCommonHeader;
class ProtoCommonPacket;

enum ProtoPacketType {
  PROTO_PACKET_TYPE_REQUEST = 0,
  PROTO_PACKET_TYPE_REPLY = 1,
  PROTO_PACKET_TYPE_MESSAGE = 2
};
bool ProtoPacketType_IsValid(int value);
const ProtoPacketType ProtoPacketType_MIN = PROTO_PACKET_TYPE_REQUEST;
const ProtoPacketType ProtoPacketType_MAX = PROTO_PACKET_TYPE_MESSAGE;
const int ProtoPacketType_ARRAYSIZE = ProtoPacketType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtoPacketType_descriptor();
inline const ::std::string& ProtoPacketType_Name(ProtoPacketType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtoPacketType_descriptor(), value);
}
inline bool ProtoPacketType_Parse(
    const ::std::string& name, ProtoPacketType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoPacketType>(
    ProtoPacketType_descriptor(), name, value);
}
enum ProtoPacketStatus {
  PROTO_PACKET_STATUS_OK = 200,
  PROTO_PACKET_STATUS_BAD_REQUEST = 400,
  PROTO_PACKET_STATUS_NOT_FOUND = 404,
  PROTO_PACKET_STATUS_INTERNAL_ERR = 500
};
bool ProtoPacketStatus_IsValid(int value);
const ProtoPacketStatus ProtoPacketStatus_MIN = PROTO_PACKET_STATUS_OK;
const ProtoPacketStatus ProtoPacketStatus_MAX = PROTO_PACKET_STATUS_INTERNAL_ERR;
const int ProtoPacketStatus_ARRAYSIZE = ProtoPacketStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtoPacketStatus_descriptor();
inline const ::std::string& ProtoPacketStatus_Name(ProtoPacketStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtoPacketStatus_descriptor(), value);
}
inline bool ProtoPacketStatus_Parse(
    const ::std::string& name, ProtoPacketStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoPacketStatus>(
    ProtoPacketStatus_descriptor(), name, value);
}
enum ProtoPacketCode {
  PROTO_PACKET_CODE_INVALID = 0,
  PROTO_PACKET_CODE_METADATA = 1,
  PROTO_PACKET_CODE_MEDIA = 2,
  PROTO_PACKET_CODE_STREAM_INFO = 3,
  PROTO_PACKET_CODE_KEY_FRAME = 4,
  PROTO_PACKET_CODE_CLIENT_HEARTBEAT = 5,
  PROTO_PACKET_CODE_MEDIA_STATISTIC = 6,
  PROTO_PACKET_CODE_CLIENT_LIST = 7
};
bool ProtoPacketCode_IsValid(int value);
const ProtoPacketCode ProtoPacketCode_MIN = PROTO_PACKET_CODE_INVALID;
const ProtoPacketCode ProtoPacketCode_MAX = PROTO_PACKET_CODE_CLIENT_LIST;
const int ProtoPacketCode_ARRAYSIZE = ProtoPacketCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtoPacketCode_descriptor();
inline const ::std::string& ProtoPacketCode_Name(ProtoPacketCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtoPacketCode_descriptor(), value);
}
inline bool ProtoPacketCode_Parse(
    const ::std::string& name, ProtoPacketCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoPacketCode>(
    ProtoPacketCode_descriptor(), name, value);
}
// ===================================================================

class ProtoCommonHeader : public ::google::protobuf::Message {
 public:
  ProtoCommonHeader();
  virtual ~ProtoCommonHeader();

  ProtoCommonHeader(const ProtoCommonHeader& from);

  inline ProtoCommonHeader& operator=(const ProtoCommonHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoCommonHeader& default_instance();

  void Swap(ProtoCommonHeader* other);

  // implements Message ----------------------------------------------

  ProtoCommonHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoCommonHeader& from);
  void MergeFrom(const ProtoCommonHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 1];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional .stream_switch.ProtoPacketType type = 2 [default = PROTO_PACKET_TYPE_REQUEST];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::stream_switch::ProtoPacketType type() const;
  inline void set_type(::stream_switch::ProtoPacketType value);

  // optional int32 code = 3 [default = 0];
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 3;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional uint32 seq = 4 [default = 0];
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 4;
  inline ::google::protobuf::uint32 seq() const;
  inline void set_seq(::google::protobuf::uint32 value);

  // optional int32 status = 5 [default = 200];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional string info = 6;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 6;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // @@protoc_insertion_point(class_scope:stream_switch.ProtoCommonHeader)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 version_;
  int type_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::uint32 seq_;
  ::std::string* info_;
  ::google::protobuf::int32 status_;
  friend void  protobuf_AddDesc_pb_5fpacket_2eproto();
  friend void protobuf_AssignDesc_pb_5fpacket_2eproto();
  friend void protobuf_ShutdownFile_pb_5fpacket_2eproto();

  void InitAsDefaultInstance();
  static ProtoCommonHeader* default_instance_;
};
// -------------------------------------------------------------------

class ProtoCommonPacket : public ::google::protobuf::Message {
 public:
  ProtoCommonPacket();
  virtual ~ProtoCommonPacket();

  ProtoCommonPacket(const ProtoCommonPacket& from);

  inline ProtoCommonPacket& operator=(const ProtoCommonPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoCommonPacket& default_instance();

  void Swap(ProtoCommonPacket* other);

  // implements Message ----------------------------------------------

  ProtoCommonPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoCommonPacket& from);
  void MergeFrom(const ProtoCommonPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .stream_switch.ProtoCommonHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::stream_switch::ProtoCommonHeader& header() const;
  inline ::stream_switch::ProtoCommonHeader* mutable_header();
  inline ::stream_switch::ProtoCommonHeader* release_header();
  inline void set_allocated_header(::stream_switch::ProtoCommonHeader* header);

  // optional bytes body = 2;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 2;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const void* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:stream_switch.ProtoCommonPacket)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::stream_switch::ProtoCommonHeader* header_;
  ::std::string* body_;
  friend void  protobuf_AddDesc_pb_5fpacket_2eproto();
  friend void protobuf_AssignDesc_pb_5fpacket_2eproto();
  friend void protobuf_ShutdownFile_pb_5fpacket_2eproto();

  void InitAsDefaultInstance();
  static ProtoCommonPacket* default_instance_;
};
// ===================================================================


// ===================================================================

// ProtoCommonHeader

// optional uint32 version = 1 [default = 1];
inline bool ProtoCommonHeader::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoCommonHeader::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoCommonHeader::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoCommonHeader::clear_version() {
  version_ = 1u;
  clear_has_version();
}
inline ::google::protobuf::uint32 ProtoCommonHeader::version() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoCommonHeader.version)
  return version_;
}
inline void ProtoCommonHeader::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:stream_switch.ProtoCommonHeader.version)
}

// optional .stream_switch.ProtoPacketType type = 2 [default = PROTO_PACKET_TYPE_REQUEST];
inline bool ProtoCommonHeader::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoCommonHeader::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoCommonHeader::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoCommonHeader::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::stream_switch::ProtoPacketType ProtoCommonHeader::type() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoCommonHeader.type)
  return static_cast< ::stream_switch::ProtoPacketType >(type_);
}
inline void ProtoCommonHeader::set_type(::stream_switch::ProtoPacketType value) {
  assert(::stream_switch::ProtoPacketType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:stream_switch.ProtoCommonHeader.type)
}

// optional int32 code = 3 [default = 0];
inline bool ProtoCommonHeader::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoCommonHeader::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoCommonHeader::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoCommonHeader::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ProtoCommonHeader::code() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoCommonHeader.code)
  return code_;
}
inline void ProtoCommonHeader::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:stream_switch.ProtoCommonHeader.code)
}

// optional uint32 seq = 4 [default = 0];
inline bool ProtoCommonHeader::has_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoCommonHeader::set_has_seq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoCommonHeader::clear_has_seq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoCommonHeader::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 ProtoCommonHeader::seq() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoCommonHeader.seq)
  return seq_;
}
inline void ProtoCommonHeader::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:stream_switch.ProtoCommonHeader.seq)
}

// optional int32 status = 5 [default = 200];
inline bool ProtoCommonHeader::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoCommonHeader::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoCommonHeader::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoCommonHeader::clear_status() {
  status_ = 200;
  clear_has_status();
}
inline ::google::protobuf::int32 ProtoCommonHeader::status() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoCommonHeader.status)
  return status_;
}
inline void ProtoCommonHeader::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:stream_switch.ProtoCommonHeader.status)
}

// optional string info = 6;
inline bool ProtoCommonHeader::has_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoCommonHeader::set_has_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoCommonHeader::clear_has_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoCommonHeader::clear_info() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& ProtoCommonHeader::info() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoCommonHeader.info)
  return *info_;
}
inline void ProtoCommonHeader::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set:stream_switch.ProtoCommonHeader.info)
}
inline void ProtoCommonHeader::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set_char:stream_switch.ProtoCommonHeader.info)
}
inline void ProtoCommonHeader::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stream_switch.ProtoCommonHeader.info)
}
inline ::std::string* ProtoCommonHeader::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:stream_switch.ProtoCommonHeader.info)
  return info_;
}
inline ::std::string* ProtoCommonHeader::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProtoCommonHeader::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:stream_switch.ProtoCommonHeader.info)
}

// -------------------------------------------------------------------

// ProtoCommonPacket

// optional .stream_switch.ProtoCommonHeader header = 1;
inline bool ProtoCommonPacket::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoCommonPacket::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoCommonPacket::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoCommonPacket::clear_header() {
  if (header_ != NULL) header_->::stream_switch::ProtoCommonHeader::Clear();
  clear_has_header();
}
inline const ::stream_switch::ProtoCommonHeader& ProtoCommonPacket::header() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoCommonPacket.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::stream_switch::ProtoCommonHeader* ProtoCommonPacket::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::stream_switch::ProtoCommonHeader;
  // @@protoc_insertion_point(field_mutable:stream_switch.ProtoCommonPacket.header)
  return header_;
}
inline ::stream_switch::ProtoCommonHeader* ProtoCommonPacket::release_header() {
  clear_has_header();
  ::stream_switch::ProtoCommonHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void ProtoCommonPacket::set_allocated_header(::stream_switch::ProtoCommonHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:stream_switch.ProtoCommonPacket.header)
}

// optional bytes body = 2;
inline bool ProtoCommonPacket::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoCommonPacket::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoCommonPacket::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoCommonPacket::clear_body() {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& ProtoCommonPacket::body() const {
  // @@protoc_insertion_point(field_get:stream_switch.ProtoCommonPacket.body)
  return *body_;
}
inline void ProtoCommonPacket::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(value);
  // @@protoc_insertion_point(field_set:stream_switch.ProtoCommonPacket.body)
}
inline void ProtoCommonPacket::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(value);
  // @@protoc_insertion_point(field_set_char:stream_switch.ProtoCommonPacket.body)
}
inline void ProtoCommonPacket::set_body(const void* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stream_switch.ProtoCommonPacket.body)
}
inline ::std::string* ProtoCommonPacket::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:stream_switch.ProtoCommonPacket.body)
  return body_;
}
inline ::std::string* ProtoCommonPacket::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProtoCommonPacket::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:stream_switch.ProtoCommonPacket.body)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace stream_switch

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::stream_switch::ProtoPacketType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stream_switch::ProtoPacketType>() {
  return ::stream_switch::ProtoPacketType_descriptor();
}
template <> struct is_proto_enum< ::stream_switch::ProtoPacketStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stream_switch::ProtoPacketStatus>() {
  return ::stream_switch::ProtoPacketStatus_descriptor();
}
template <> struct is_proto_enum< ::stream_switch::ProtoPacketCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stream_switch::ProtoPacketCode>() {
  return ::stream_switch::ProtoPacketCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pb_5fpacket_2eproto__INCLUDED
