// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_packet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pb_packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace stream_switch {

namespace {

const ::google::protobuf::Descriptor* ProtoCommonHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoCommonHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoCommonPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoCommonPacket_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtoPacketType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtoPacketStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtoPacketCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pb_5fpacket_2eproto() {
  protobuf_AddDesc_pb_5fpacket_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pb_packet.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoCommonHeader_descriptor_ = file->message_type(0);
  static const int ProtoCommonHeader_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCommonHeader, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCommonHeader, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCommonHeader, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCommonHeader, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCommonHeader, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCommonHeader, info_),
  };
  ProtoCommonHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoCommonHeader_descriptor_,
      ProtoCommonHeader::default_instance_,
      ProtoCommonHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCommonHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCommonHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoCommonHeader));
  ProtoCommonPacket_descriptor_ = file->message_type(1);
  static const int ProtoCommonPacket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCommonPacket, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCommonPacket, body_),
  };
  ProtoCommonPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoCommonPacket_descriptor_,
      ProtoCommonPacket::default_instance_,
      ProtoCommonPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCommonPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCommonPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoCommonPacket));
  ProtoPacketType_descriptor_ = file->enum_type(0);
  ProtoPacketStatus_descriptor_ = file->enum_type(1);
  ProtoPacketCode_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pb_5fpacket_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoCommonHeader_descriptor_, &ProtoCommonHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoCommonPacket_descriptor_, &ProtoCommonPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pb_5fpacket_2eproto() {
  delete ProtoCommonHeader::default_instance_;
  delete ProtoCommonHeader_reflection_;
  delete ProtoCommonPacket::default_instance_;
  delete ProtoCommonPacket_reflection_;
}

void protobuf_AddDesc_pb_5fpacket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017pb_packet.proto\022\rstream_switch\"\264\001\n\021Pro"
    "toCommonHeader\022\022\n\007version\030\001 \001(\r:\0011\022G\n\004ty"
    "pe\030\002 \001(\0162\036.stream_switch.ProtoPacketType"
    ":\031PROTO_PACKET_TYPE_REQUEST\022\017\n\004code\030\003 \001("
    "\005:\0010\022\016\n\003seq\030\004 \001(\r:\0010\022\023\n\006status\030\005 \001(\005:\00320"
    "0\022\014\n\004info\030\006 \001(\t\"S\n\021ProtoCommonPacket\0220\n\006"
    "header\030\001 \001(\0132 .stream_switch.ProtoCommon"
    "Header\022\014\n\004body\030\002 \001(\014*l\n\017ProtoPacketType\022"
    "\035\n\031PROTO_PACKET_TYPE_REQUEST\020\000\022\033\n\027PROTO_"
    "PACKET_TYPE_REPLY\020\001\022\035\n\031PROTO_PACKET_TYPE"
    "_MESSAGE\020\002*\241\001\n\021ProtoPacketStatus\022\033\n\026PROT"
    "O_PACKET_STATUS_OK\020\310\001\022$\n\037PROTO_PACKET_ST"
    "ATUS_BAD_REQUEST\020\220\003\022\"\n\035PROTO_PACKET_STAT"
    "US_NOT_FOUND\020\224\003\022%\n PROTO_PACKET_STATUS_I"
    "NTERNAL_ERR\020\364\003*\243\002\n\017ProtoPacketCode\022\035\n\031PR"
    "OTO_PACKET_CODE_INVALID\020\000\022\036\n\032PROTO_PACKE"
    "T_CODE_METADATA\020\001\022\033\n\027PROTO_PACKET_CODE_M"
    "EDIA\020\002\022!\n\035PROTO_PACKET_CODE_STREAM_INFO\020"
    "\003\022\037\n\033PROTO_PACKET_CODE_KEY_FRAME\020\004\022&\n\"PR"
    "OTO_PACKET_CODE_CLIENT_HEARTBEAT\020\005\022%\n!PR"
    "OTO_PACKET_CODE_MEDIA_STATISTIC\020\006\022!\n\035PRO"
    "TO_PACKET_CODE_CLIENT_LIST\020\007", 868);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pb_packet.proto", &protobuf_RegisterTypes);
  ProtoCommonHeader::default_instance_ = new ProtoCommonHeader();
  ProtoCommonPacket::default_instance_ = new ProtoCommonPacket();
  ProtoCommonHeader::default_instance_->InitAsDefaultInstance();
  ProtoCommonPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pb_5fpacket_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pb_5fpacket_2eproto {
  StaticDescriptorInitializer_pb_5fpacket_2eproto() {
    protobuf_AddDesc_pb_5fpacket_2eproto();
  }
} static_descriptor_initializer_pb_5fpacket_2eproto_;
const ::google::protobuf::EnumDescriptor* ProtoPacketType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPacketType_descriptor_;
}
bool ProtoPacketType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProtoPacketStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPacketStatus_descriptor_;
}
bool ProtoPacketStatus_IsValid(int value) {
  switch(value) {
    case 200:
    case 400:
    case 404:
    case 500:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProtoPacketCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPacketCode_descriptor_;
}
bool ProtoPacketCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoCommonHeader::kVersionFieldNumber;
const int ProtoCommonHeader::kTypeFieldNumber;
const int ProtoCommonHeader::kCodeFieldNumber;
const int ProtoCommonHeader::kSeqFieldNumber;
const int ProtoCommonHeader::kStatusFieldNumber;
const int ProtoCommonHeader::kInfoFieldNumber;
#endif  // !_MSC_VER

ProtoCommonHeader::ProtoCommonHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stream_switch.ProtoCommonHeader)
}

void ProtoCommonHeader::InitAsDefaultInstance() {
}

ProtoCommonHeader::ProtoCommonHeader(const ProtoCommonHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stream_switch.ProtoCommonHeader)
}

void ProtoCommonHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 1u;
  type_ = 0;
  code_ = 0;
  seq_ = 0u;
  status_ = 200;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoCommonHeader::~ProtoCommonHeader() {
  // @@protoc_insertion_point(destructor:stream_switch.ProtoCommonHeader)
  SharedDtor();
}

void ProtoCommonHeader::SharedDtor() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void ProtoCommonHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoCommonHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoCommonHeader_descriptor_;
}

const ProtoCommonHeader& ProtoCommonHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fpacket_2eproto();
  return *default_instance_;
}

ProtoCommonHeader* ProtoCommonHeader::default_instance_ = NULL;

ProtoCommonHeader* ProtoCommonHeader::New() const {
  return new ProtoCommonHeader;
}

void ProtoCommonHeader::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProtoCommonHeader*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(type_, seq_);
    version_ = 1u;
    status_ = 200;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoCommonHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stream_switch.ProtoCommonHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .stream_switch.ProtoPacketType type = 2 [default = PROTO_PACKET_TYPE_REQUEST];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::stream_switch::ProtoPacketType_IsValid(value)) {
            set_type(static_cast< ::stream_switch::ProtoPacketType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }

      // optional int32 code = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_seq;
        break;
      }

      // optional uint32 seq = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional int32 status = 5 [default = 200];
      case 5: {
        if (tag == 40) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_info;
        break;
      }

      // optional string info = 6;
      case 6: {
        if (tag == 50) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stream_switch.ProtoCommonHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stream_switch.ProtoCommonHeader)
  return false;
#undef DO_
}

void ProtoCommonHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stream_switch.ProtoCommonHeader)
  // optional uint32 version = 1 [default = 1];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional .stream_switch.ProtoPacketType type = 2 [default = PROTO_PACKET_TYPE_REQUEST];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 code = 3 [default = 0];
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->code(), output);
  }

  // optional uint32 seq = 4 [default = 0];
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seq(), output);
  }

  // optional int32 status = 5 [default = 200];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional string info = 6;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stream_switch.ProtoCommonHeader)
}

::google::protobuf::uint8* ProtoCommonHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream_switch.ProtoCommonHeader)
  // optional uint32 version = 1 [default = 1];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional .stream_switch.ProtoPacketType type = 2 [default = PROTO_PACKET_TYPE_REQUEST];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 code = 3 [default = 0];
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->code(), target);
  }

  // optional uint32 seq = 4 [default = 0];
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seq(), target);
  }

  // optional int32 status = 5 [default = 200];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional string info = 6;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream_switch.ProtoCommonHeader)
  return target;
}

int ProtoCommonHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 1];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .stream_switch.ProtoPacketType type = 2 [default = PROTO_PACKET_TYPE_REQUEST];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 code = 3 [default = 0];
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional uint32 seq = 4 [default = 0];
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

    // optional int32 status = 5 [default = 200];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional string info = 6;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoCommonHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoCommonHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoCommonHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoCommonHeader::MergeFrom(const ProtoCommonHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoCommonHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoCommonHeader::CopyFrom(const ProtoCommonHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoCommonHeader::IsInitialized() const {

  return true;
}

void ProtoCommonHeader::Swap(ProtoCommonHeader* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(type_, other->type_);
    std::swap(code_, other->code_);
    std::swap(seq_, other->seq_);
    std::swap(status_, other->status_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoCommonHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoCommonHeader_descriptor_;
  metadata.reflection = ProtoCommonHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoCommonPacket::kHeaderFieldNumber;
const int ProtoCommonPacket::kBodyFieldNumber;
#endif  // !_MSC_VER

ProtoCommonPacket::ProtoCommonPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stream_switch.ProtoCommonPacket)
}

void ProtoCommonPacket::InitAsDefaultInstance() {
  header_ = const_cast< ::stream_switch::ProtoCommonHeader*>(&::stream_switch::ProtoCommonHeader::default_instance());
}

ProtoCommonPacket::ProtoCommonPacket(const ProtoCommonPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stream_switch.ProtoCommonPacket)
}

void ProtoCommonPacket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoCommonPacket::~ProtoCommonPacket() {
  // @@protoc_insertion_point(destructor:stream_switch.ProtoCommonPacket)
  SharedDtor();
}

void ProtoCommonPacket::SharedDtor() {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void ProtoCommonPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoCommonPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoCommonPacket_descriptor_;
}

const ProtoCommonPacket& ProtoCommonPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fpacket_2eproto();
  return *default_instance_;
}

ProtoCommonPacket* ProtoCommonPacket::default_instance_ = NULL;

ProtoCommonPacket* ProtoCommonPacket::New() const {
  return new ProtoCommonPacket;
}

void ProtoCommonPacket::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_header()) {
      if (header_ != NULL) header_->::stream_switch::ProtoCommonHeader::Clear();
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoCommonPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stream_switch.ProtoCommonPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .stream_switch.ProtoCommonHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional bytes body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stream_switch.ProtoCommonPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stream_switch.ProtoCommonPacket)
  return false;
#undef DO_
}

void ProtoCommonPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stream_switch.ProtoCommonPacket)
  // optional .stream_switch.ProtoCommonHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional bytes body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stream_switch.ProtoCommonPacket)
}

::google::protobuf::uint8* ProtoCommonPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream_switch.ProtoCommonPacket)
  // optional .stream_switch.ProtoCommonHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional bytes body = 2;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream_switch.ProtoCommonPacket)
  return target;
}

int ProtoCommonPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .stream_switch.ProtoCommonHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional bytes body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoCommonPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoCommonPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoCommonPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoCommonPacket::MergeFrom(const ProtoCommonPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::stream_switch::ProtoCommonHeader::MergeFrom(from.header());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoCommonPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoCommonPacket::CopyFrom(const ProtoCommonPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoCommonPacket::IsInitialized() const {

  return true;
}

void ProtoCommonPacket::Swap(ProtoCommonPacket* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoCommonPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoCommonPacket_descriptor_;
  metadata.reflection = ProtoCommonPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace stream_switch

// @@protoc_insertion_point(global_scope)
